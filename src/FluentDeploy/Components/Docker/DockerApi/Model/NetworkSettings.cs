/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     NetworkSettings exposes the network settings in the API
    /// </summary>
    [DataContract]
    public class NetworkSettings : IEquatable<NetworkSettings>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="NetworkSettings" /> class.
        /// </summary>
        /// <param name="bridge">Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;)..</param>
        /// <param name="sandboxID">SandboxID uniquely represents a container&#39;s network stack..</param>
        /// <param name="hairpinMode">Indicates if hairpin NAT should be enabled on the virtual interface. .</param>
        /// <param name="linkLocalIPv6Address">IPv6 unicast address using the link-local prefix..</param>
        /// <param name="linkLocalIPv6PrefixLen">Prefix length of the IPv6 unicast address..</param>
        /// <param name="ports">
        ///     PortMap describes the mapping of container ports to host ports, using the container&#39;s
        ///     port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp
        ///     &#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping
        ///     table. .
        /// </param>
        /// <param name="sandboxKey">SandboxKey identifies the sandbox.</param>
        /// <param name="secondaryIPAddresses">secondaryIPAddresses.</param>
        /// <param name="secondaryIPv6Addresses">secondaryIPv6Addresses.</param>
        /// <param name="endpointID">
        ///     EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p
        ///     &gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot;
        ///     network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map
        ///     instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to
        ///     be removed in Docker 17.12.0 .
        /// </param>
        /// <param name="gateway">
        ///     Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
        ///     &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network.
        ///     Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0 .
        /// </param>
        /// <param name="globalIPv6Address">
        ///     Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /
        ///     &gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\
        ///     &quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map
        ///     instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to
        ///     be removed in Docker 17.12.0 .
        /// </param>
        /// <param name="globalIPv6PrefixLen">
        ///     Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0 .
        /// </param>
        /// <param name="iPAddress">
        ///     IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
        ///     &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network.
        ///     Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0 .
        /// </param>
        /// <param name="iPPrefixLen">
        ///     Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This
        ///     field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from
        ///     the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt;
        ///     information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .
        /// </param>
        /// <param name="iPv6Gateway">
        ///     IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**:
        ///     This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information
        ///     from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same
        ///     &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0 .
        /// </param>
        /// <param name="macAddress">
        ///     MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /
        ///     &gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\
        ///     &quot; network. Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map
        ///     instead, which contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to
        ///     be removed in Docker 17.12.0 .
        /// </param>
        /// <param name="networks">Information about all networks that the container is connected to. .</param>
        public NetworkSettings(string bridge = default, string sandboxID = default, bool hairpinMode = default,
            string linkLocalIPv6Address = default, int linkLocalIPv6PrefixLen = default,
            Dictionary<string, List<PortBinding>> ports = default, string sandboxKey = default,
            List<Address> secondaryIPAddresses = default, List<Address> secondaryIPv6Addresses = default,
            string endpointID = default, string gateway = default, string globalIPv6Address = default,
            int globalIPv6PrefixLen = default, string iPAddress = default, int iPPrefixLen = default,
            string iPv6Gateway = default, string macAddress = default,
            Dictionary<string, EndpointSettings> networks = default)
        {
            SecondaryIPAddresses = secondaryIPAddresses;
            SecondaryIPv6Addresses = secondaryIPv6Addresses;
            Bridge = bridge;
            SandboxID = sandboxID;
            HairpinMode = hairpinMode;
            LinkLocalIPv6Address = linkLocalIPv6Address;
            LinkLocalIPv6PrefixLen = linkLocalIPv6PrefixLen;
            Ports = ports;
            SandboxKey = sandboxKey;
            SecondaryIPAddresses = secondaryIPAddresses;
            SecondaryIPv6Addresses = secondaryIPv6Addresses;
            EndpointID = endpointID;
            Gateway = gateway;
            GlobalIPv6Address = globalIPv6Address;
            GlobalIPv6PrefixLen = globalIPv6PrefixLen;
            IPAddress = iPAddress;
            IPPrefixLen = iPPrefixLen;
            IPv6Gateway = iPv6Gateway;
            MacAddress = macAddress;
            Networks = networks;
        }

        /// <summary>
        ///     Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;).
        /// </summary>
        /// <value>Name of the network&#39;a bridge (for example, &#x60;docker0&#x60;).</value>
        [DataMember(Name = "Bridge", EmitDefaultValue = false)]
        public string Bridge { get; set; }

        /// <summary>
        ///     SandboxID uniquely represents a container&#39;s network stack.
        /// </summary>
        /// <value>SandboxID uniquely represents a container&#39;s network stack.</value>
        [DataMember(Name = "SandboxID", EmitDefaultValue = false)]
        public string SandboxID { get; set; }

        /// <summary>
        ///     Indicates if hairpin NAT should be enabled on the virtual interface.
        /// </summary>
        /// <value>Indicates if hairpin NAT should be enabled on the virtual interface. </value>
        [DataMember(Name = "HairpinMode", EmitDefaultValue = false)]
        public bool HairpinMode { get; set; }

        /// <summary>
        ///     IPv6 unicast address using the link-local prefix.
        /// </summary>
        /// <value>IPv6 unicast address using the link-local prefix.</value>
        [DataMember(Name = "LinkLocalIPv6Address", EmitDefaultValue = false)]
        public string LinkLocalIPv6Address { get; set; }

        /// <summary>
        ///     Prefix length of the IPv6 unicast address.
        /// </summary>
        /// <value>Prefix length of the IPv6 unicast address.</value>
        [DataMember(Name = "LinkLocalIPv6PrefixLen", EmitDefaultValue = false)]
        public int LinkLocalIPv6PrefixLen { get; set; }

        /// <summary>
        ///     PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol
        ///     as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container
        ///     &#39;s port is mapped for multiple protocols, separate entries are added to the mapping table.
        /// </summary>
        /// <value>
        ///     PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and
        ///     protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a
        ///     container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table.
        /// </value>
        [DataMember(Name = "Ports", EmitDefaultValue = false)]
        public Dictionary<string, List<PortBinding>> Ports { get; set; }

        /// <summary>
        ///     SandboxKey identifies the sandbox
        /// </summary>
        /// <value>SandboxKey identifies the sandbox</value>
        [DataMember(Name = "SandboxKey", EmitDefaultValue = false)]
        public string SandboxKey { get; set; }

        /// <summary>
        ///     Gets or Sets SecondaryIPAddresses
        /// </summary>
        [DataMember(Name = "SecondaryIPAddresses", EmitDefaultValue = true)]
        public List<Address> SecondaryIPAddresses { get; set; }

        /// <summary>
        ///     Gets or Sets SecondaryIPv6Addresses
        /// </summary>
        [DataMember(Name = "SecondaryIPv6Addresses", EmitDefaultValue = true)]
        public List<Address> SecondaryIPv6Addresses { get; set; }

        /// <summary>
        ///     EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </summary>
        /// <value>
        ///     EndpointID uniquely represents a service endpoint in a Sandbox.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </value>
        [DataMember(Name = "EndpointID", EmitDefaultValue = false)]
        public string EndpointID { get; set; }

        /// <summary>
        ///     Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </summary>
        /// <value>
        ///     Gateway address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </value>
        [DataMember(Name = "Gateway", EmitDefaultValue = false)]
        public string Gateway { get; set; }

        /// <summary>
        ///     Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </summary>
        /// <value>
        ///     Global IPv6 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </value>
        [DataMember(Name = "GlobalIPv6Address", EmitDefaultValue = false)]
        public string GlobalIPv6Address { get; set; }

        /// <summary>
        ///     Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only
        ///     propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;
        ///     bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information.
        ///     This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0
        /// </summary>
        /// <value>
        ///     Mask length of the global IPv6 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is
        ///     only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \
        ///     &quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt;
        ///     information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0
        /// </value>
        [DataMember(Name = "GlobalIPv6PrefixLen", EmitDefaultValue = false)]
        public int GlobalIPv6PrefixLen { get; set; }

        /// <summary>
        ///     IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**:
        ///     This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information
        ///     from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same
        ///     &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0
        /// </summary>
        /// <value>
        ///     IPv4 address for the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </value>
        [DataMember(Name = "IPAddress", EmitDefaultValue = false)]
        public string IPAddress { get; set; }

        /// <summary>
        ///     Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only
        ///     propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;
        ///     bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information.
        ///     This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0
        /// </summary>
        /// <value>
        ///     Mask length of the IPv4 address.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only
        ///     propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;
        ///     bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information.
        ///     This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0
        /// </value>
        [DataMember(Name = "IPPrefixLen", EmitDefaultValue = false)]
        public int IPPrefixLen { get; set; }

        /// <summary>
        ///     IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only
        ///     propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;
        ///     bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information.
        ///     This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0
        /// </summary>
        /// <value>
        ///     IPv6 gateway address for this network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Deprecated**: This field is only
        ///     propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use the information from the \&quot;
        ///     bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which contains the same &gt; information.
        ///     This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in Docker 17.12.0
        /// </value>
        [DataMember(Name = "IPv6Gateway", EmitDefaultValue = false)]
        public string IPv6Gateway { get; set; }

        /// <summary>
        ///     MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network. Use
        ///     the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </summary>
        /// <value>
        ///     MAC address for the container on the default \&quot;bridge\&quot; network.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
        ///     &gt; **Deprecated**: This field is only propagated when attached to the &gt; default \&quot;bridge\&quot; network.
        ///     Use the information from the \&quot;bridge\&quot; &gt; network inside the &#x60;Networks&#x60; map instead, which
        ///     contains the same &gt; information. This field was deprecated in Docker 1.9 and is scheduled &gt; to be removed in
        ///     Docker 17.12.0
        /// </value>
        [DataMember(Name = "MacAddress", EmitDefaultValue = false)]
        public string MacAddress { get; set; }

        /// <summary>
        ///     Information about all networks that the container is connected to.
        /// </summary>
        /// <value>Information about all networks that the container is connected to. </value>
        [DataMember(Name = "Networks", EmitDefaultValue = false)]
        public Dictionary<string, EndpointSettings> Networks { get; set; }

        /// <summary>
        ///     Returns true if NetworkSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkSettings input)
        {
            if (input == null)
                return false;

            return
                (
                    Bridge == input.Bridge ||
                    Bridge != null &&
                    Bridge.Equals(input.Bridge)
                ) &&
                (
                    SandboxID == input.SandboxID ||
                    SandboxID != null &&
                    SandboxID.Equals(input.SandboxID)
                ) &&
                (
                    HairpinMode == input.HairpinMode ||
                    HairpinMode != null &&
                    HairpinMode.Equals(input.HairpinMode)
                ) &&
                (
                    LinkLocalIPv6Address == input.LinkLocalIPv6Address ||
                    LinkLocalIPv6Address != null &&
                    LinkLocalIPv6Address.Equals(input.LinkLocalIPv6Address)
                ) &&
                (
                    LinkLocalIPv6PrefixLen == input.LinkLocalIPv6PrefixLen ||
                    LinkLocalIPv6PrefixLen != null &&
                    LinkLocalIPv6PrefixLen.Equals(input.LinkLocalIPv6PrefixLen)
                ) &&
                (
                    Ports == input.Ports ||
                    Ports != null &&
                    input.Ports != null &&
                    Ports.SequenceEqual(input.Ports)
                ) &&
                (
                    SandboxKey == input.SandboxKey ||
                    SandboxKey != null &&
                    SandboxKey.Equals(input.SandboxKey)
                ) &&
                (
                    SecondaryIPAddresses == input.SecondaryIPAddresses ||
                    SecondaryIPAddresses != null &&
                    input.SecondaryIPAddresses != null &&
                    SecondaryIPAddresses.SequenceEqual(input.SecondaryIPAddresses)
                ) &&
                (
                    SecondaryIPv6Addresses == input.SecondaryIPv6Addresses ||
                    SecondaryIPv6Addresses != null &&
                    input.SecondaryIPv6Addresses != null &&
                    SecondaryIPv6Addresses.SequenceEqual(input.SecondaryIPv6Addresses)
                ) &&
                (
                    EndpointID == input.EndpointID ||
                    EndpointID != null &&
                    EndpointID.Equals(input.EndpointID)
                ) &&
                (
                    Gateway == input.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(input.Gateway)
                ) &&
                (
                    GlobalIPv6Address == input.GlobalIPv6Address ||
                    GlobalIPv6Address != null &&
                    GlobalIPv6Address.Equals(input.GlobalIPv6Address)
                ) &&
                (
                    GlobalIPv6PrefixLen == input.GlobalIPv6PrefixLen ||
                    GlobalIPv6PrefixLen != null &&
                    GlobalIPv6PrefixLen.Equals(input.GlobalIPv6PrefixLen)
                ) &&
                (
                    IPAddress == input.IPAddress ||
                    IPAddress != null &&
                    IPAddress.Equals(input.IPAddress)
                ) &&
                (
                    IPPrefixLen == input.IPPrefixLen ||
                    IPPrefixLen != null &&
                    IPPrefixLen.Equals(input.IPPrefixLen)
                ) &&
                (
                    IPv6Gateway == input.IPv6Gateway ||
                    IPv6Gateway != null &&
                    IPv6Gateway.Equals(input.IPv6Gateway)
                ) &&
                (
                    MacAddress == input.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(input.MacAddress)
                ) &&
                (
                    Networks == input.Networks ||
                    Networks != null &&
                    input.Networks != null &&
                    Networks.SequenceEqual(input.Networks)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkSettings {\n");
            sb.Append("  Bridge: ").Append(Bridge).Append("\n");
            sb.Append("  SandboxID: ").Append(SandboxID).Append("\n");
            sb.Append("  HairpinMode: ").Append(HairpinMode).Append("\n");
            sb.Append("  LinkLocalIPv6Address: ").Append(LinkLocalIPv6Address).Append("\n");
            sb.Append("  LinkLocalIPv6PrefixLen: ").Append(LinkLocalIPv6PrefixLen).Append("\n");
            sb.Append("  Ports: ").Append(Ports).Append("\n");
            sb.Append("  SandboxKey: ").Append(SandboxKey).Append("\n");
            sb.Append("  SecondaryIPAddresses: ").Append(SecondaryIPAddresses).Append("\n");
            sb.Append("  SecondaryIPv6Addresses: ").Append(SecondaryIPv6Addresses).Append("\n");
            sb.Append("  EndpointID: ").Append(EndpointID).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  GlobalIPv6Address: ").Append(GlobalIPv6Address).Append("\n");
            sb.Append("  GlobalIPv6PrefixLen: ").Append(GlobalIPv6PrefixLen).Append("\n");
            sb.Append("  IPAddress: ").Append(IPAddress).Append("\n");
            sb.Append("  IPPrefixLen: ").Append(IPPrefixLen).Append("\n");
            sb.Append("  IPv6Gateway: ").Append(IPv6Gateway).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  Networks: ").Append(Networks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as NetworkSettings);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Bridge != null)
                    hashCode = hashCode * 59 + Bridge.GetHashCode();
                if (SandboxID != null)
                    hashCode = hashCode * 59 + SandboxID.GetHashCode();
                if (HairpinMode != null)
                    hashCode = hashCode * 59 + HairpinMode.GetHashCode();
                if (LinkLocalIPv6Address != null)
                    hashCode = hashCode * 59 + LinkLocalIPv6Address.GetHashCode();
                if (LinkLocalIPv6PrefixLen != null)
                    hashCode = hashCode * 59 + LinkLocalIPv6PrefixLen.GetHashCode();
                if (Ports != null)
                    hashCode = hashCode * 59 + Ports.GetHashCode();
                if (SandboxKey != null)
                    hashCode = hashCode * 59 + SandboxKey.GetHashCode();
                if (SecondaryIPAddresses != null)
                    hashCode = hashCode * 59 + SecondaryIPAddresses.GetHashCode();
                if (SecondaryIPv6Addresses != null)
                    hashCode = hashCode * 59 + SecondaryIPv6Addresses.GetHashCode();
                if (EndpointID != null)
                    hashCode = hashCode * 59 + EndpointID.GetHashCode();
                if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                if (GlobalIPv6Address != null)
                    hashCode = hashCode * 59 + GlobalIPv6Address.GetHashCode();
                if (GlobalIPv6PrefixLen != null)
                    hashCode = hashCode * 59 + GlobalIPv6PrefixLen.GetHashCode();
                if (IPAddress != null)
                    hashCode = hashCode * 59 + IPAddress.GetHashCode();
                if (IPPrefixLen != null)
                    hashCode = hashCode * 59 + IPPrefixLen.GetHashCode();
                if (IPv6Gateway != null)
                    hashCode = hashCode * 59 + IPv6Gateway.GetHashCode();
                if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                if (Networks != null)
                    hashCode = hashCode * 59 + Networks.GetHashCode();
                return hashCode;
            }
        }
    }
}