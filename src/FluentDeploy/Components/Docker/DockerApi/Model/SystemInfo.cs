/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     SystemInfo
    /// </summary>
    [DataContract]
    public class SystemInfo : IEquatable<SystemInfo>, IValidatableObject
    {
        /// <summary>
        ///     The driver to use for managing cgroups.
        /// </summary>
        /// <value>The driver to use for managing cgroups. </value>
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum CgroupDriverEnum
        {
            /// <summary>
            ///     Enum Cgroupfs for value: cgroupfs
            /// </summary>
            [EnumMember(Value = "cgroupfs")] Cgroupfs = 1,

            /// <summary>
            ///     Enum Systemd for value: systemd
            /// </summary>
            [EnumMember(Value = "systemd")] Systemd = 2,

            /// <summary>
            ///     Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")] None = 3
        }

        /// <summary>
        ///     Represents the isolation technology to use as a default for containers. The supported values are platform-specific.
        ///     If no isolation value is specified on daemon start, on Windows client, the default is &#x60;hyperv&#x60;, and on
        ///     Windows server, the default is &#x60;process&#x60;.  This option is currently not used on other platforms.
        /// </summary>
        /// <value>
        ///     Represents the isolation technology to use as a default for containers. The supported values are
        ///     platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is &#x60;
        ///     hyperv&#x60;, and on Windows server, the default is &#x60;process&#x60;.  This option is currently not used on
        ///     other platforms.
        /// </value>
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum IsolationEnum
        {
            /// <summary>
            ///     Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")] Default = 1,

            /// <summary>
            ///     Enum Hyperv for value: hyperv
            /// </summary>
            [EnumMember(Value = "hyperv")] Hyperv = 2,

            /// <summary>
            ///     Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")] Process = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="SystemInfo" /> class.
        /// </summary>
        /// <param name="iD">
        ///     Unique identifier of the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The format of the ID
        ///     itself is not part of the API, and &gt; should not be considered stable. .
        /// </param>
        /// <param name="containers">Total number of containers on the host..</param>
        /// <param name="containersRunning">Number of containers with status &#x60;\&quot;running\&quot;&#x60;. .</param>
        /// <param name="containersPaused">Number of containers with status &#x60;\&quot;paused\&quot;&#x60;. .</param>
        /// <param name="containersStopped">Number of containers with status &#x60;\&quot;stopped\&quot;&#x60;. .</param>
        /// <param name="images">Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. .</param>
        /// <param name="driver">Name of the storage driver in use..</param>
        /// <param name="driverStatus">
        ///     Information specific to the storage driver, provided as \&quot;label\&quot; / \&quot;value\
        ///     &quot; pairs.  This information is provided by the storage driver, and formatted in a way consistent with the
        ///     output of &#x60;docker info&#x60; on the command line.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The
        ///     information returned in this field, including the &gt; formatting of values and labels, should not be considered
        ///     stable, &gt; and may change without notice. .
        /// </param>
        /// <param name="dockerRootDir">
        ///     Root directory of persistent Docker state.  Defaults to &#x60;/var/lib/docker&#x60; on
        ///     Linux, and &#x60;C:\\ProgramData\\docker&#x60; on Windows. .
        /// </param>
        /// <param name="systemStatus">
        ///     Status information about this node (standalone Swarm API).  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
        ///     &gt; **Note**: The information returned in this field is only propagated &gt; by the Swarm standalone API, and is
        ///     empty (&#x60;null&#x60;) when using &gt; built-in swarm mode. .
        /// </param>
        /// <param name="plugins">plugins.</param>
        /// <param name="memoryLimit">Indicates if the host has memory limit support enabled..</param>
        /// <param name="swapLimit">Indicates if the host has memory swap limit support enabled..</param>
        /// <param name="kernelMemory">Indicates if the host has kernel memory limit support enabled..</param>
        /// <param name="cpuCfsPeriod">Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. .</param>
        /// <param name="cpuCfsQuota">Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. .</param>
        /// <param name="cPUShares">Indicates if CPU Shares limiting is supported by the host. .</param>
        /// <param name="cPUSet">
        ///     Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See
        ///     [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) .
        /// </param>
        /// <param name="pidsLimit">Indicates if the host kernel has PID limit support enabled..</param>
        /// <param name="oomKillDisable">Indicates if OOM killer disable is supported on the host..</param>
        /// <param name="iPv4Forwarding">Indicates IPv4 forwarding is enabled..</param>
        /// <param name="bridgeNfIptables">Indicates if &#x60;bridge-nf-call-iptables&#x60; is available on the host..</param>
        /// <param name="bridgeNfIp6tables">Indicates if &#x60;bridge-nf-call-ip6tables&#x60; is available on the host..</param>
        /// <param name="debug">Indicates if the daemon is running in debug-mode / with debug-level logging enabled. .</param>
        /// <param name="nFd">
        ///     The total number of file Descriptors in use by the daemon process.  This information is only returned
        ///     if debug-mode is enabled. .
        /// </param>
        /// <param name="nGoroutines">
        ///     The  number of goroutines that currently exist.  This information is only returned if
        ///     debug-mode is enabled. .
        /// </param>
        /// <param name="systemTime">
        ///     Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with
        ///     nano-seconds. .
        /// </param>
        /// <param name="loggingDriver">The logging driver to use as a default for new containers. .</param>
        /// <param name="cgroupDriver">The driver to use for managing cgroups.  (default to CgroupDriverEnum.Cgroupfs).</param>
        /// <param name="nEventsListener">Number of event listeners subscribed..</param>
        /// <param name="kernelVersion">
        ///     Kernel version of the host.  On Linux, this information obtained from &#x60;uname&#x60;. On
        ///     Windows this information is queried from the &lt;kbd&gt;HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows
        ///     NT\\\\CurrentVersion\\\\&lt;/kbd&gt; registry value, for example _\&quot;10.0 14393
        ///     (14393.1198.amd64fre.rs1_release_sec.170427-1353)\&quot;_. .
        /// </param>
        /// <param name="operatingSystem">
        ///     Name of the host&#39;s operating system, for example: \&quot;Ubuntu 16.04.2 LTS\&quot; or
        ///     \&quot;Windows Server 2016 Datacenter\&quot; .
        /// </param>
        /// <param name="oSType">
        ///     Generic type of the operating system of the host, as returned by the Go runtime (&#x60;GOOS&#x60;
        ///     ).  Currently returned values are \&quot;linux\&quot; and \&quot;windows\&quot;. A full list of possible values can
        ///     be found in the [Go documentation](https://golang.org/doc/install/source#environment). .
        /// </param>
        /// <param name="architecture">
        ///     Hardware architecture of the host, as returned by the Go runtime (&#x60;GOARCH&#x60;).  A
        ///     full list of possible values can be found in the [Go
        ///     documentation](https://golang.org/doc/install/source#environment). .
        /// </param>
        /// <param name="nCPU">
        ///     The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by
        ///     querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon
        ///     is started are not reflected. .
        /// </param>
        /// <param name="memTotal">Total amount of physical memory available on the host, in bytes. .</param>
        /// <param name="indexServerAddress">
        ///     Address / URL of the index server that is used for image search, and as a default for
        ///     user authentication for Docker Hub and Docker Cloud.  (default to &quot;https://index.docker.io/v1/&quot;).
        /// </param>
        /// <param name="registryConfig">registryConfig.</param>
        /// <param name="genericResources">
        ///     User-defined resources can be either Integer resources (e.g, &#x60;SSD&#x3D;3&#x60;) or
        ///     String resources (e.g, &#x60;GPU&#x3D;UUID1&#x60;). .
        /// </param>
        /// <param name="httpProxy">
        ///     HTTP-proxy configured for the daemon. This value is obtained from the [&#x60;HTTP_PROXY&#x60;
        ///     ](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info
        ///     component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.
        ///     Containers do not automatically inherit this configuration. .
        /// </param>
        /// <param name="httpsProxy">
        ///     HTTPS-proxy configured for the daemon. This value is obtained from the [&#x60;HTTPS_PROXY
        ///     &#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user
        ///     info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API
        ///     response.  Containers do not automatically inherit this configuration. .
        /// </param>
        /// <param name="noProxy">
        ///     Comma-separated list of domain extensions for which no proxy should be used. This value is
        ///     obtained from the [&#x60;NO_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
        ///     environment variable.  Containers do not automatically inherit this configuration. .
        /// </param>
        /// <param name="name">Hostname of the host..</param>
        /// <param name="labels">
        ///     User-defined labels (key/value metadata) as set on the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;
        ///     &gt; **Note**: When part of a Swarm, nodes can both have _daemon_ labels, &gt; set through the daemon
        ///     configuration, and _node_ labels, set from a &gt; manager node in the Swarm. Node labels are not included in this
        ///     &gt; field. Node labels can be retrieved using the &#x60;/nodes/(id)&#x60; endpoint &gt; on a manager node in the
        ///     Swarm. .
        /// </param>
        /// <param name="experimentalBuild">Indicates if experimental features are enabled on the daemon. .</param>
        /// <param name="serverVersion">
        ///     Version string of the daemon.  &gt; **Note**: the [standalone Swarm API](/swarm/swarm-api/)
        ///     &gt; returns the Swarm version instead of the daemon  version, for example &gt; &#x60;swarm/1.2.8&#x60;. .
        /// </param>
        /// <param name="clusterStore">
        ///     URL of the distributed storage backend.   The storage backend is used for multihost
        ///     networking (to store network and endpoint information) and by the node discovery mechanism.  &lt;p&gt;&lt;br /&gt;
        ///     &lt;/p&gt;  &gt; **Note**: This field is only propagated when using standalone Swarm &gt; mode, and overlay
        ///     networking using an external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store,
        ///     and &gt; this field will be empty. .
        /// </param>
        /// <param name="clusterAdvertise">
        ///     The network endpoint that the Engine advertises for the purpose of node discovery.
        ///     ClusterAdvertise is a &#x60;host:port&#x60; combination on which the daemon is reachable by other hosts.  &lt;p&gt;
        ///     &lt;br /&gt;&lt;/p&gt;  &gt; **Note**: This field is only propagated when using standalone Swarm &gt; mode, and
        ///     overlay networking using an external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft
        ///     store, and &gt; this field will be empty. .
        /// </param>
        /// <param name="runtimes">
        ///     List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on
        ///     the daemon. Keys hold the \&quot;name\&quot; used to reference the runtime.  The Docker daemon relies on an OCI
        ///     compliant runtime (invoked via the &#x60;containerd&#x60; daemon) as its interface to the Linux kernel namespaces,
        ///     cgroups, and SELinux.  The default runtime is &#x60;runc&#x60;, and automatically configured. Additional runtimes
        ///     can be configured by the user and will be listed here. .
        /// </param>
        /// <param name="defaultRuntime">
        ///     Name of the default OCI runtime that is used when starting containers.  The default can be
        ///     overridden per-container at create time.  (default to &quot;runc&quot;).
        /// </param>
        /// <param name="swarm">swarm.</param>
        /// <param name="liveRestoreEnabled">
        ///     Indicates if live restore is enabled.  If enabled, containers are kept running when
        ///     the daemon is shutdown or upon daemon start if running containers are detected.  (default to false).
        /// </param>
        /// <param name="isolation">
        ///     Represents the isolation technology to use as a default for containers. The supported values
        ///     are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is
        ///     &#x60;hyperv&#x60;, and on Windows server, the default is &#x60;process&#x60;.  This option is currently not used
        ///     on other platforms.  (default to IsolationEnum.Default).
        /// </param>
        /// <param name="initBinary">
        ///     Name and, optional, path of the &#x60;docker-init&#x60; binary.  If the path is omitted, the
        ///     daemon searches the host&#39;s &#x60;$PATH&#x60; for the binary and uses the first result. .
        /// </param>
        /// <param name="containerdCommit">containerdCommit.</param>
        /// <param name="runcCommit">runcCommit.</param>
        /// <param name="initCommit">initCommit.</param>
        /// <param name="securityOptions">
        ///     List of security features that are enabled on the daemon, such as apparmor, seccomp,
        ///     SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be
        ///     present, and are included as a comma-separated list of key/value pairs. .
        /// </param>
        /// <param name="productLicense">
        ///     Reports a summary of the product license on the daemon.  If a commercial license has been
        ///     applied to the daemon, information such as number of nodes, and expiration are included. .
        /// </param>
        /// <param name="warnings">
        ///     List of warnings / informational messages about missing features, or issues related to the
        ///     daemon configuration.  These messages can be printed by the client as information to the user. .
        /// </param>
        public SystemInfo(string iD = default, int containers = default, int containersRunning = default,
            int containersPaused = default, int containersStopped = default, int images = default,
            string driver = default, List<List<string>> driverStatus = default, string dockerRootDir = default,
            List<List<string>> systemStatus = default, PluginsInfo plugins = default, bool memoryLimit = default,
            bool swapLimit = default, bool kernelMemory = default, bool cpuCfsPeriod = default,
            bool cpuCfsQuota = default, bool cPUShares = default, bool cPUSet = default, bool pidsLimit = default,
            bool oomKillDisable = default, bool iPv4Forwarding = default, bool bridgeNfIptables = default,
            bool bridgeNfIp6tables = default, bool debug = default, int nFd = default, int nGoroutines = default,
            string systemTime = default, string loggingDriver = default,
            CgroupDriverEnum? cgroupDriver = CgroupDriverEnum.Cgroupfs, int nEventsListener = default,
            string kernelVersion = default, string operatingSystem = default, string oSType = default,
            string architecture = default, int nCPU = default, long memTotal = default,
            string indexServerAddress = "https://index.docker.io/v1/", RegistryServiceConfig registryConfig = default,
            List<object> genericResources = default, string httpProxy = default, string httpsProxy = default,
            string noProxy = default, string name = default, List<string> labels = default,
            bool experimentalBuild = default, string serverVersion = default, string clusterStore = default,
            string clusterAdvertise = default, Dictionary<string, Runtime> runtimes = default,
            string defaultRuntime = "runc", SwarmInfo swarm = default, bool liveRestoreEnabled = false,
            IsolationEnum? isolation = IsolationEnum.Default, string initBinary = default,
            Commit containerdCommit = default, Commit runcCommit = default, Commit initCommit = default,
            List<string> securityOptions = default, string productLicense = default, List<string> warnings = default)
        {
            RegistryConfig = registryConfig;
            ID = iD;
            Containers = containers;
            ContainersRunning = containersRunning;
            ContainersPaused = containersPaused;
            ContainersStopped = containersStopped;
            Images = images;
            Driver = driver;
            DriverStatus = driverStatus;
            DockerRootDir = dockerRootDir;
            SystemStatus = systemStatus;
            Plugins = plugins;
            MemoryLimit = memoryLimit;
            SwapLimit = swapLimit;
            KernelMemory = kernelMemory;
            CpuCfsPeriod = cpuCfsPeriod;
            CpuCfsQuota = cpuCfsQuota;
            CPUShares = cPUShares;
            CPUSet = cPUSet;
            PidsLimit = pidsLimit;
            OomKillDisable = oomKillDisable;
            IPv4Forwarding = iPv4Forwarding;
            BridgeNfIptables = bridgeNfIptables;
            BridgeNfIp6tables = bridgeNfIp6tables;
            Debug = debug;
            NFd = nFd;
            NGoroutines = nGoroutines;
            SystemTime = systemTime;
            LoggingDriver = loggingDriver;
            // use default value if no "cgroupDriver" provided
            if (cgroupDriver == null)
                CgroupDriver = CgroupDriverEnum.Cgroupfs;
            else
                CgroupDriver = cgroupDriver;
            NEventsListener = nEventsListener;
            KernelVersion = kernelVersion;
            OperatingSystem = operatingSystem;
            OSType = oSType;
            Architecture = architecture;
            NCPU = nCPU;
            MemTotal = memTotal;
            // use default value if no "indexServerAddress" provided
            if (indexServerAddress == null)
                IndexServerAddress = "https://index.docker.io/v1/";
            else
                IndexServerAddress = indexServerAddress;
            RegistryConfig = registryConfig;
            GenericResources = genericResources;
            HttpProxy = httpProxy;
            HttpsProxy = httpsProxy;
            NoProxy = noProxy;
            Name = name;
            Labels = labels;
            ExperimentalBuild = experimentalBuild;
            ServerVersion = serverVersion;
            ClusterStore = clusterStore;
            ClusterAdvertise = clusterAdvertise;
            Runtimes = runtimes;
            // use default value if no "defaultRuntime" provided
            if (defaultRuntime == null)
                DefaultRuntime = "runc";
            else
                DefaultRuntime = defaultRuntime;
            Swarm = swarm;
            // use default value if no "liveRestoreEnabled" provided
            if (liveRestoreEnabled == null)
                LiveRestoreEnabled = false;
            else
                LiveRestoreEnabled = liveRestoreEnabled;
            // use default value if no "isolation" provided
            if (isolation == null)
                Isolation = IsolationEnum.Default;
            else
                Isolation = isolation;
            InitBinary = initBinary;
            ContainerdCommit = containerdCommit;
            RuncCommit = runcCommit;
            InitCommit = initCommit;
            SecurityOptions = securityOptions;
            ProductLicense = productLicense;
            Warnings = warnings;
        }

        /// <summary>
        ///     The driver to use for managing cgroups.
        /// </summary>
        /// <value>The driver to use for managing cgroups. </value>
        [DataMember(Name = "CgroupDriver", EmitDefaultValue = false)]
        public CgroupDriverEnum? CgroupDriver { get; set; }

        /// <summary>
        ///     Represents the isolation technology to use as a default for containers. The supported values are platform-specific.
        ///     If no isolation value is specified on daemon start, on Windows client, the default is &#x60;hyperv&#x60;, and on
        ///     Windows server, the default is &#x60;process&#x60;.  This option is currently not used on other platforms.
        /// </summary>
        /// <value>
        ///     Represents the isolation technology to use as a default for containers. The supported values are
        ///     platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is &#x60;
        ///     hyperv&#x60;, and on Windows server, the default is &#x60;process&#x60;.  This option is currently not used on
        ///     other platforms.
        /// </value>
        [DataMember(Name = "Isolation", EmitDefaultValue = false)]
        public IsolationEnum? Isolation { get; set; }

        /// <summary>
        ///     Unique identifier of the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The format of the ID itself is
        ///     not part of the API, and &gt; should not be considered stable.
        /// </summary>
        /// <value>
        ///     Unique identifier of the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The format of the ID itself is
        ///     not part of the API, and &gt; should not be considered stable.
        /// </value>
        [DataMember(Name = "ID", EmitDefaultValue = false)]
        public string ID { get; set; }

        /// <summary>
        ///     Total number of containers on the host.
        /// </summary>
        /// <value>Total number of containers on the host.</value>
        [DataMember(Name = "Containers", EmitDefaultValue = false)]
        public int Containers { get; set; }

        /// <summary>
        ///     Number of containers with status &#x60;\&quot;running\&quot;&#x60;.
        /// </summary>
        /// <value>Number of containers with status &#x60;\&quot;running\&quot;&#x60;. </value>
        [DataMember(Name = "ContainersRunning", EmitDefaultValue = false)]
        public int ContainersRunning { get; set; }

        /// <summary>
        ///     Number of containers with status &#x60;\&quot;paused\&quot;&#x60;.
        /// </summary>
        /// <value>Number of containers with status &#x60;\&quot;paused\&quot;&#x60;. </value>
        [DataMember(Name = "ContainersPaused", EmitDefaultValue = false)]
        public int ContainersPaused { get; set; }

        /// <summary>
        ///     Number of containers with status &#x60;\&quot;stopped\&quot;&#x60;.
        /// </summary>
        /// <value>Number of containers with status &#x60;\&quot;stopped\&quot;&#x60;. </value>
        [DataMember(Name = "ContainersStopped", EmitDefaultValue = false)]
        public int ContainersStopped { get; set; }

        /// <summary>
        ///     Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted.
        /// </summary>
        /// <value>Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. </value>
        [DataMember(Name = "Images", EmitDefaultValue = false)]
        public int Images { get; set; }

        /// <summary>
        ///     Name of the storage driver in use.
        /// </summary>
        /// <value>Name of the storage driver in use.</value>
        [DataMember(Name = "Driver", EmitDefaultValue = false)]
        public string Driver { get; set; }

        /// <summary>
        ///     Information specific to the storage driver, provided as \&quot;label\&quot; / \&quot;value\&quot; pairs.  This
        ///     information is provided by the storage driver, and formatted in a way consistent with the output of &#x60;docker
        ///     info&#x60; on the command line.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The information returned in this
        ///     field, including the &gt; formatting of values and labels, should not be considered stable, &gt; and may change
        ///     without notice.
        /// </summary>
        /// <value>
        ///     Information specific to the storage driver, provided as \&quot;label\&quot; / \&quot;value\&quot; pairs.  This
        ///     information is provided by the storage driver, and formatted in a way consistent with the output of &#x60;docker
        ///     info&#x60; on the command line.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The information returned in this
        ///     field, including the &gt; formatting of values and labels, should not be considered stable, &gt; and may change
        ///     without notice.
        /// </value>
        [DataMember(Name = "DriverStatus", EmitDefaultValue = false)]
        public List<List<string>> DriverStatus { get; set; }

        /// <summary>
        ///     Root directory of persistent Docker state.  Defaults to &#x60;/var/lib/docker&#x60; on Linux, and &#x60;
        ///     C:\\ProgramData\\docker&#x60; on Windows.
        /// </summary>
        /// <value>
        ///     Root directory of persistent Docker state.  Defaults to &#x60;/var/lib/docker&#x60; on Linux, and &#x60;
        ///     C:\\ProgramData\\docker&#x60; on Windows.
        /// </value>
        [DataMember(Name = "DockerRootDir", EmitDefaultValue = false)]
        public string DockerRootDir { get; set; }

        /// <summary>
        ///     Status information about this node (standalone Swarm API).  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The
        ///     information returned in this field is only propagated &gt; by the Swarm standalone API, and is empty (&#x60;null
        ///     &#x60;) when using &gt; built-in swarm mode.
        /// </summary>
        /// <value>
        ///     Status information about this node (standalone Swarm API).  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: The
        ///     information returned in this field is only propagated &gt; by the Swarm standalone API, and is empty (&#x60;null
        ///     &#x60;) when using &gt; built-in swarm mode.
        /// </value>
        [DataMember(Name = "SystemStatus", EmitDefaultValue = false)]
        public List<List<string>> SystemStatus { get; set; }

        /// <summary>
        ///     Gets or Sets Plugins
        /// </summary>
        [DataMember(Name = "Plugins", EmitDefaultValue = false)]
        public PluginsInfo Plugins { get; set; }

        /// <summary>
        ///     Indicates if the host has memory limit support enabled.
        /// </summary>
        /// <value>Indicates if the host has memory limit support enabled.</value>
        [DataMember(Name = "MemoryLimit", EmitDefaultValue = false)]
        public bool MemoryLimit { get; set; }

        /// <summary>
        ///     Indicates if the host has memory swap limit support enabled.
        /// </summary>
        /// <value>Indicates if the host has memory swap limit support enabled.</value>
        [DataMember(Name = "SwapLimit", EmitDefaultValue = false)]
        public bool SwapLimit { get; set; }

        /// <summary>
        ///     Indicates if the host has kernel memory limit support enabled.
        /// </summary>
        /// <value>Indicates if the host has kernel memory limit support enabled.</value>
        [DataMember(Name = "KernelMemory", EmitDefaultValue = false)]
        public bool KernelMemory { get; set; }

        /// <summary>
        ///     Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.
        /// </summary>
        /// <value>Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. </value>
        [DataMember(Name = "CpuCfsPeriod", EmitDefaultValue = false)]
        public bool CpuCfsPeriod { get; set; }

        /// <summary>
        ///     Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.
        /// </summary>
        /// <value>Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. </value>
        [DataMember(Name = "CpuCfsQuota", EmitDefaultValue = false)]
        public bool CpuCfsQuota { get; set; }

        /// <summary>
        ///     Indicates if CPU Shares limiting is supported by the host.
        /// </summary>
        /// <value>Indicates if CPU Shares limiting is supported by the host. </value>
        [DataMember(Name = "CPUShares", EmitDefaultValue = false)]
        public bool CPUShares { get; set; }

        /// <summary>
        ///     Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See
        ///     [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
        /// </summary>
        /// <value>
        ///     Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See
        ///     [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
        /// </value>
        [DataMember(Name = "CPUSet", EmitDefaultValue = false)]
        public bool CPUSet { get; set; }

        /// <summary>
        ///     Indicates if the host kernel has PID limit support enabled.
        /// </summary>
        /// <value>Indicates if the host kernel has PID limit support enabled.</value>
        [DataMember(Name = "PidsLimit", EmitDefaultValue = false)]
        public bool PidsLimit { get; set; }

        /// <summary>
        ///     Indicates if OOM killer disable is supported on the host.
        /// </summary>
        /// <value>Indicates if OOM killer disable is supported on the host.</value>
        [DataMember(Name = "OomKillDisable", EmitDefaultValue = false)]
        public bool OomKillDisable { get; set; }

        /// <summary>
        ///     Indicates IPv4 forwarding is enabled.
        /// </summary>
        /// <value>Indicates IPv4 forwarding is enabled.</value>
        [DataMember(Name = "IPv4Forwarding", EmitDefaultValue = false)]
        public bool IPv4Forwarding { get; set; }

        /// <summary>
        ///     Indicates if &#x60;bridge-nf-call-iptables&#x60; is available on the host.
        /// </summary>
        /// <value>Indicates if &#x60;bridge-nf-call-iptables&#x60; is available on the host.</value>
        [DataMember(Name = "BridgeNfIptables", EmitDefaultValue = false)]
        public bool BridgeNfIptables { get; set; }

        /// <summary>
        ///     Indicates if &#x60;bridge-nf-call-ip6tables&#x60; is available on the host.
        /// </summary>
        /// <value>Indicates if &#x60;bridge-nf-call-ip6tables&#x60; is available on the host.</value>
        [DataMember(Name = "BridgeNfIp6tables", EmitDefaultValue = false)]
        public bool BridgeNfIp6tables { get; set; }

        /// <summary>
        ///     Indicates if the daemon is running in debug-mode / with debug-level logging enabled.
        /// </summary>
        /// <value>Indicates if the daemon is running in debug-mode / with debug-level logging enabled. </value>
        [DataMember(Name = "Debug", EmitDefaultValue = false)]
        public bool Debug { get; set; }

        /// <summary>
        ///     The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode
        ///     is enabled.
        /// </summary>
        /// <value>
        ///     The total number of file Descriptors in use by the daemon process.  This information is only returned if
        ///     debug-mode is enabled.
        /// </value>
        [DataMember(Name = "NFd", EmitDefaultValue = false)]
        public int NFd { get; set; }

        /// <summary>
        ///     The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.
        /// </summary>
        /// <value>The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. </value>
        [DataMember(Name = "NGoroutines", EmitDefaultValue = false)]
        public int NGoroutines { get; set; }

        /// <summary>
        ///     Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
        /// </summary>
        /// <value>Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. </value>
        [DataMember(Name = "SystemTime", EmitDefaultValue = false)]
        public string SystemTime { get; set; }

        /// <summary>
        ///     The logging driver to use as a default for new containers.
        /// </summary>
        /// <value>The logging driver to use as a default for new containers. </value>
        [DataMember(Name = "LoggingDriver", EmitDefaultValue = false)]
        public string LoggingDriver { get; set; }


        /// <summary>
        ///     Number of event listeners subscribed.
        /// </summary>
        /// <value>Number of event listeners subscribed.</value>
        [DataMember(Name = "NEventsListener", EmitDefaultValue = false)]
        public int NEventsListener { get; set; }

        /// <summary>
        ///     Kernel version of the host.  On Linux, this information obtained from &#x60;uname&#x60;. On Windows this
        ///     information is queried from the &lt;kbd&gt;HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows
        ///     NT\\\\CurrentVersion\\\\&lt;/kbd&gt; registry value, for example _\&quot;10.0 14393
        ///     (14393.1198.amd64fre.rs1_release_sec.170427-1353)\&quot;_.
        /// </summary>
        /// <value>
        ///     Kernel version of the host.  On Linux, this information obtained from &#x60;uname&#x60;. On Windows this
        ///     information is queried from the &lt;kbd&gt;HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows
        ///     NT\\\\CurrentVersion\\\\&lt;/kbd&gt; registry value, for example _\&quot;10.0 14393
        ///     (14393.1198.amd64fre.rs1_release_sec.170427-1353)\&quot;_.
        /// </value>
        [DataMember(Name = "KernelVersion", EmitDefaultValue = false)]
        public string KernelVersion { get; set; }

        /// <summary>
        ///     Name of the host&#39;s operating system, for example: \&quot;Ubuntu 16.04.2 LTS\&quot; or \&quot;Windows Server
        ///     2016 Datacenter\&quot;
        /// </summary>
        /// <value>
        ///     Name of the host&#39;s operating system, for example: \&quot;Ubuntu 16.04.2 LTS\&quot; or \&quot;Windows Server
        ///     2016 Datacenter\&quot;
        /// </value>
        [DataMember(Name = "OperatingSystem", EmitDefaultValue = false)]
        public string OperatingSystem { get; set; }

        /// <summary>
        ///     Generic type of the operating system of the host, as returned by the Go runtime (&#x60;GOOS&#x60;).  Currently
        ///     returned values are \&quot;linux\&quot; and \&quot;windows\&quot;. A full list of possible values can be found in
        ///     the [Go documentation](https://golang.org/doc/install/source#environment).
        /// </summary>
        /// <value>
        ///     Generic type of the operating system of the host, as returned by the Go runtime (&#x60;GOOS&#x60;).  Currently
        ///     returned values are \&quot;linux\&quot; and \&quot;windows\&quot;. A full list of possible values can be found in
        ///     the [Go documentation](https://golang.org/doc/install/source#environment).
        /// </value>
        [DataMember(Name = "OSType", EmitDefaultValue = false)]
        public string OSType { get; set; }

        /// <summary>
        ///     Hardware architecture of the host, as returned by the Go runtime (&#x60;GOARCH&#x60;).  A full list of possible
        ///     values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
        /// </summary>
        /// <value>
        ///     Hardware architecture of the host, as returned by the Go runtime (&#x60;GOARCH&#x60;).  A full list of possible
        ///     values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
        /// </value>
        [DataMember(Name = "Architecture", EmitDefaultValue = false)]
        public string Architecture { get; set; }

        /// <summary>
        ///     The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating
        ///     system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not
        ///     reflected.
        /// </summary>
        /// <value>
        ///     The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the
        ///     operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are
        ///     not reflected.
        /// </value>
        [DataMember(Name = "NCPU", EmitDefaultValue = false)]
        public int NCPU { get; set; }

        /// <summary>
        ///     Total amount of physical memory available on the host, in bytes.
        /// </summary>
        /// <value>Total amount of physical memory available on the host, in bytes. </value>
        [DataMember(Name = "MemTotal", EmitDefaultValue = false)]
        public long MemTotal { get; set; }

        /// <summary>
        ///     Address / URL of the index server that is used for image search, and as a default for user authentication for
        ///     Docker Hub and Docker Cloud.
        /// </summary>
        /// <value>
        ///     Address / URL of the index server that is used for image search, and as a default for user authentication for
        ///     Docker Hub and Docker Cloud.
        /// </value>
        [DataMember(Name = "IndexServerAddress", EmitDefaultValue = false)]
        public string IndexServerAddress { get; set; }

        /// <summary>
        ///     Gets or Sets RegistryConfig
        /// </summary>
        [DataMember(Name = "RegistryConfig", EmitDefaultValue = true)]
        public RegistryServiceConfig RegistryConfig { get; set; }

        /// <summary>
        ///     User-defined resources can be either Integer resources (e.g, &#x60;SSD&#x3D;3&#x60;) or String resources (e.g,
        ///     &#x60;GPU&#x3D;UUID1&#x60;).
        /// </summary>
        /// <value>
        ///     User-defined resources can be either Integer resources (e.g, &#x60;SSD&#x3D;3&#x60;) or String resources (e.g,
        ///     &#x60;GPU&#x3D;UUID1&#x60;).
        /// </value>
        [DataMember(Name = "GenericResources", EmitDefaultValue = false)]
        public List<object> GenericResources { get; set; }

        /// <summary>
        ///     HTTP-proxy configured for the daemon. This value is obtained from the [&#x60;HTTP_PROXY&#x60;
        ///     ](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info
        ///     component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.
        ///     Containers do not automatically inherit this configuration.
        /// </summary>
        /// <value>
        ///     HTTP-proxy configured for the daemon. This value is obtained from the [&#x60;HTTP_PROXY&#x60;
        ///     ](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info
        ///     component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.
        ///     Containers do not automatically inherit this configuration.
        /// </value>
        [DataMember(Name = "HttpProxy", EmitDefaultValue = false)]
        public string HttpProxy { get; set; }

        /// <summary>
        ///     HTTPS-proxy configured for the daemon. This value is obtained from the [&#x60;HTTPS_PROXY&#x60;
        ///     ](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info
        ///     component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.
        ///     Containers do not automatically inherit this configuration.
        /// </summary>
        /// <value>
        ///     HTTPS-proxy configured for the daemon. This value is obtained from the [&#x60;HTTPS_PROXY&#x60;
        ///     ](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info
        ///     component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.
        ///     Containers do not automatically inherit this configuration.
        /// </value>
        [DataMember(Name = "HttpsProxy", EmitDefaultValue = false)]
        public string HttpsProxy { get; set; }

        /// <summary>
        ///     Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [
        ///     &#x60;NO_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
        ///     Containers do not automatically inherit this configuration.
        /// </summary>
        /// <value>
        ///     Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [
        ///     &#x60;NO_PROXY&#x60;](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
        ///     Containers do not automatically inherit this configuration.
        /// </value>
        [DataMember(Name = "NoProxy", EmitDefaultValue = false)]
        public string NoProxy { get; set; }

        /// <summary>
        ///     Hostname of the host.
        /// </summary>
        /// <value>Hostname of the host.</value>
        [DataMember(Name = "Name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        ///     User-defined labels (key/value metadata) as set on the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**:
        ///     When part of a Swarm, nodes can both have _daemon_ labels, &gt; set through the daemon configuration, and _node_
        ///     labels, set from a &gt; manager node in the Swarm. Node labels are not included in this &gt; field. Node labels can
        ///     be retrieved using the &#x60;/nodes/(id)&#x60; endpoint &gt; on a manager node in the Swarm.
        /// </summary>
        /// <value>
        ///     User-defined labels (key/value metadata) as set on the daemon.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**:
        ///     When part of a Swarm, nodes can both have _daemon_ labels, &gt; set through the daemon configuration, and _node_
        ///     labels, set from a &gt; manager node in the Swarm. Node labels are not included in this &gt; field. Node labels can
        ///     be retrieved using the &#x60;/nodes/(id)&#x60; endpoint &gt; on a manager node in the Swarm.
        /// </value>
        [DataMember(Name = "Labels", EmitDefaultValue = false)]
        public List<string> Labels { get; set; }

        /// <summary>
        ///     Indicates if experimental features are enabled on the daemon.
        /// </summary>
        /// <value>Indicates if experimental features are enabled on the daemon. </value>
        [DataMember(Name = "ExperimentalBuild", EmitDefaultValue = false)]
        public bool ExperimentalBuild { get; set; }

        /// <summary>
        ///     Version string of the daemon.  &gt; **Note**: the [standalone Swarm API](/swarm/swarm-api/) &gt; returns the Swarm
        ///     version instead of the daemon  version, for example &gt; &#x60;swarm/1.2.8&#x60;.
        /// </summary>
        /// <value>
        ///     Version string of the daemon.  &gt; **Note**: the [standalone Swarm API](/swarm/swarm-api/) &gt; returns the
        ///     Swarm version instead of the daemon  version, for example &gt; &#x60;swarm/1.2.8&#x60;.
        /// </value>
        [DataMember(Name = "ServerVersion", EmitDefaultValue = false)]
        public string ServerVersion { get; set; }

        /// <summary>
        ///     URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network
        ///     and endpoint information) and by the node discovery mechanism.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**:
        ///     This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an external k/v
        ///     store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field will be
        ///     empty.
        /// </summary>
        /// <value>
        ///     URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network
        ///     and endpoint information) and by the node discovery mechanism.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**:
        ///     This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an external k/v
        ///     store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field will be
        ///     empty.
        /// </value>
        [DataMember(Name = "ClusterStore", EmitDefaultValue = false)]
        public string ClusterStore { get; set; }

        /// <summary>
        ///     The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a &#x60;
        ///     host:port&#x60; combination on which the daemon is reachable by other hosts.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Note**: This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an
        ///     external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field
        ///     will be empty.
        /// </summary>
        /// <value>
        ///     The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a &#x60;
        ///     host:port&#x60; combination on which the daemon is reachable by other hosts.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt;
        ///     **Note**: This field is only propagated when using standalone Swarm &gt; mode, and overlay networking using an
        ///     external k/v store. Overlay &gt; networks with Swarm mode enabled use the built-in raft store, and &gt; this field
        ///     will be empty.
        /// </value>
        [DataMember(Name = "ClusterAdvertise", EmitDefaultValue = false)]
        public string ClusterAdvertise { get; set; }

        /// <summary>
        ///     List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys
        ///     hold the \&quot;name\&quot; used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime
        ///     (invoked via the &#x60;containerd&#x60; daemon) as its interface to the Linux kernel namespaces, cgroups, and
        ///     SELinux.  The default runtime is &#x60;runc&#x60;, and automatically configured. Additional runtimes can be
        ///     configured by the user and will be listed here.
        /// </summary>
        /// <value>
        ///     List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys
        ///     hold the \&quot;name\&quot; used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime
        ///     (invoked via the &#x60;containerd&#x60; daemon) as its interface to the Linux kernel namespaces, cgroups, and
        ///     SELinux.  The default runtime is &#x60;runc&#x60;, and automatically configured. Additional runtimes can be
        ///     configured by the user and will be listed here.
        /// </value>
        [DataMember(Name = "Runtimes", EmitDefaultValue = false)]
        public Dictionary<string, Runtime> Runtimes { get; set; }

        /// <summary>
        ///     Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container
        ///     at create time.
        /// </summary>
        /// <value>
        ///     Name of the default OCI runtime that is used when starting containers.  The default can be overridden
        ///     per-container at create time.
        /// </value>
        [DataMember(Name = "DefaultRuntime", EmitDefaultValue = false)]
        public string DefaultRuntime { get; set; }

        /// <summary>
        ///     Gets or Sets Swarm
        /// </summary>
        [DataMember(Name = "Swarm", EmitDefaultValue = false)]
        public SwarmInfo Swarm { get; set; }

        /// <summary>
        ///     Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon
        ///     daemon start if running containers are detected.
        /// </summary>
        /// <value>
        ///     Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or
        ///     upon daemon start if running containers are detected.
        /// </value>
        [DataMember(Name = "LiveRestoreEnabled", EmitDefaultValue = false)]
        public bool LiveRestoreEnabled { get; set; }


        /// <summary>
        ///     Name and, optional, path of the &#x60;docker-init&#x60; binary.  If the path is omitted, the daemon searches the
        ///     host&#39;s &#x60;$PATH&#x60; for the binary and uses the first result.
        /// </summary>
        /// <value>
        ///     Name and, optional, path of the &#x60;docker-init&#x60; binary.  If the path is omitted, the daemon searches the
        ///     host&#39;s &#x60;$PATH&#x60; for the binary and uses the first result.
        /// </value>
        [DataMember(Name = "InitBinary", EmitDefaultValue = false)]
        public string InitBinary { get; set; }

        /// <summary>
        ///     Gets or Sets ContainerdCommit
        /// </summary>
        [DataMember(Name = "ContainerdCommit", EmitDefaultValue = false)]
        public Commit ContainerdCommit { get; set; }

        /// <summary>
        ///     Gets or Sets RuncCommit
        /// </summary>
        [DataMember(Name = "RuncCommit", EmitDefaultValue = false)]
        public Commit RuncCommit { get; set; }

        /// <summary>
        ///     Gets or Sets InitCommit
        /// </summary>
        [DataMember(Name = "InitCommit", EmitDefaultValue = false)]
        public Commit InitCommit { get; set; }

        /// <summary>
        ///     List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces
        ///     (userns), and rootless.  Additional configuration options for each security feature may be present, and are
        ///     included as a comma-separated list of key/value pairs.
        /// </summary>
        /// <value>
        ///     List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces
        ///     (userns), and rootless.  Additional configuration options for each security feature may be present, and are
        ///     included as a comma-separated list of key/value pairs.
        /// </value>
        [DataMember(Name = "SecurityOptions", EmitDefaultValue = false)]
        public List<string> SecurityOptions { get; set; }

        /// <summary>
        ///     Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon,
        ///     information such as number of nodes, and expiration are included.
        /// </summary>
        /// <value>
        ///     Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon,
        ///     information such as number of nodes, and expiration are included.
        /// </value>
        [DataMember(Name = "ProductLicense", EmitDefaultValue = false)]
        public string ProductLicense { get; set; }

        /// <summary>
        ///     List of warnings / informational messages about missing features, or issues related to the daemon configuration.
        ///     These messages can be printed by the client as information to the user.
        /// </summary>
        /// <value>
        ///     List of warnings / informational messages about missing features, or issues related to the daemon configuration.
        ///     These messages can be printed by the client as information to the user.
        /// </value>
        [DataMember(Name = "Warnings", EmitDefaultValue = false)]
        public List<string> Warnings { get; set; }

        /// <summary>
        ///     Returns true if SystemInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    ID == input.ID ||
                    ID != null &&
                    ID.Equals(input.ID)
                ) &&
                (
                    Containers == input.Containers ||
                    Containers != null &&
                    Containers.Equals(input.Containers)
                ) &&
                (
                    ContainersRunning == input.ContainersRunning ||
                    ContainersRunning != null &&
                    ContainersRunning.Equals(input.ContainersRunning)
                ) &&
                (
                    ContainersPaused == input.ContainersPaused ||
                    ContainersPaused != null &&
                    ContainersPaused.Equals(input.ContainersPaused)
                ) &&
                (
                    ContainersStopped == input.ContainersStopped ||
                    ContainersStopped != null &&
                    ContainersStopped.Equals(input.ContainersStopped)
                ) &&
                (
                    Images == input.Images ||
                    Images != null &&
                    Images.Equals(input.Images)
                ) &&
                (
                    Driver == input.Driver ||
                    Driver != null &&
                    Driver.Equals(input.Driver)
                ) &&
                (
                    DriverStatus == input.DriverStatus ||
                    DriverStatus != null &&
                    input.DriverStatus != null &&
                    DriverStatus.SequenceEqual(input.DriverStatus)
                ) &&
                (
                    DockerRootDir == input.DockerRootDir ||
                    DockerRootDir != null &&
                    DockerRootDir.Equals(input.DockerRootDir)
                ) &&
                (
                    SystemStatus == input.SystemStatus ||
                    SystemStatus != null &&
                    input.SystemStatus != null &&
                    SystemStatus.SequenceEqual(input.SystemStatus)
                ) &&
                (
                    Plugins == input.Plugins ||
                    Plugins != null &&
                    Plugins.Equals(input.Plugins)
                ) &&
                (
                    MemoryLimit == input.MemoryLimit ||
                    MemoryLimit != null &&
                    MemoryLimit.Equals(input.MemoryLimit)
                ) &&
                (
                    SwapLimit == input.SwapLimit ||
                    SwapLimit != null &&
                    SwapLimit.Equals(input.SwapLimit)
                ) &&
                (
                    KernelMemory == input.KernelMemory ||
                    KernelMemory != null &&
                    KernelMemory.Equals(input.KernelMemory)
                ) &&
                (
                    CpuCfsPeriod == input.CpuCfsPeriod ||
                    CpuCfsPeriod != null &&
                    CpuCfsPeriod.Equals(input.CpuCfsPeriod)
                ) &&
                (
                    CpuCfsQuota == input.CpuCfsQuota ||
                    CpuCfsQuota != null &&
                    CpuCfsQuota.Equals(input.CpuCfsQuota)
                ) &&
                (
                    CPUShares == input.CPUShares ||
                    CPUShares != null &&
                    CPUShares.Equals(input.CPUShares)
                ) &&
                (
                    CPUSet == input.CPUSet ||
                    CPUSet != null &&
                    CPUSet.Equals(input.CPUSet)
                ) &&
                (
                    PidsLimit == input.PidsLimit ||
                    PidsLimit != null &&
                    PidsLimit.Equals(input.PidsLimit)
                ) &&
                (
                    OomKillDisable == input.OomKillDisable ||
                    OomKillDisable != null &&
                    OomKillDisable.Equals(input.OomKillDisable)
                ) &&
                (
                    IPv4Forwarding == input.IPv4Forwarding ||
                    IPv4Forwarding != null &&
                    IPv4Forwarding.Equals(input.IPv4Forwarding)
                ) &&
                (
                    BridgeNfIptables == input.BridgeNfIptables ||
                    BridgeNfIptables != null &&
                    BridgeNfIptables.Equals(input.BridgeNfIptables)
                ) &&
                (
                    BridgeNfIp6tables == input.BridgeNfIp6tables ||
                    BridgeNfIp6tables != null &&
                    BridgeNfIp6tables.Equals(input.BridgeNfIp6tables)
                ) &&
                (
                    Debug == input.Debug ||
                    Debug != null &&
                    Debug.Equals(input.Debug)
                ) &&
                (
                    NFd == input.NFd ||
                    NFd != null &&
                    NFd.Equals(input.NFd)
                ) &&
                (
                    NGoroutines == input.NGoroutines ||
                    NGoroutines != null &&
                    NGoroutines.Equals(input.NGoroutines)
                ) &&
                (
                    SystemTime == input.SystemTime ||
                    SystemTime != null &&
                    SystemTime.Equals(input.SystemTime)
                ) &&
                (
                    LoggingDriver == input.LoggingDriver ||
                    LoggingDriver != null &&
                    LoggingDriver.Equals(input.LoggingDriver)
                ) &&
                (
                    CgroupDriver == input.CgroupDriver ||
                    CgroupDriver != null &&
                    CgroupDriver.Equals(input.CgroupDriver)
                ) &&
                (
                    NEventsListener == input.NEventsListener ||
                    NEventsListener != null &&
                    NEventsListener.Equals(input.NEventsListener)
                ) &&
                (
                    KernelVersion == input.KernelVersion ||
                    KernelVersion != null &&
                    KernelVersion.Equals(input.KernelVersion)
                ) &&
                (
                    OperatingSystem == input.OperatingSystem ||
                    OperatingSystem != null &&
                    OperatingSystem.Equals(input.OperatingSystem)
                ) &&
                (
                    OSType == input.OSType ||
                    OSType != null &&
                    OSType.Equals(input.OSType)
                ) &&
                (
                    Architecture == input.Architecture ||
                    Architecture != null &&
                    Architecture.Equals(input.Architecture)
                ) &&
                (
                    NCPU == input.NCPU ||
                    NCPU != null &&
                    NCPU.Equals(input.NCPU)
                ) &&
                (
                    MemTotal == input.MemTotal ||
                    MemTotal != null &&
                    MemTotal.Equals(input.MemTotal)
                ) &&
                (
                    IndexServerAddress == input.IndexServerAddress ||
                    IndexServerAddress != null &&
                    IndexServerAddress.Equals(input.IndexServerAddress)
                ) &&
                (
                    RegistryConfig == input.RegistryConfig ||
                    RegistryConfig != null &&
                    RegistryConfig.Equals(input.RegistryConfig)
                ) &&
                (
                    GenericResources == input.GenericResources ||
                    GenericResources != null &&
                    input.GenericResources != null &&
                    GenericResources.SequenceEqual(input.GenericResources)
                ) &&
                (
                    HttpProxy == input.HttpProxy ||
                    HttpProxy != null &&
                    HttpProxy.Equals(input.HttpProxy)
                ) &&
                (
                    HttpsProxy == input.HttpsProxy ||
                    HttpsProxy != null &&
                    HttpsProxy.Equals(input.HttpsProxy)
                ) &&
                (
                    NoProxy == input.NoProxy ||
                    NoProxy != null &&
                    NoProxy.Equals(input.NoProxy)
                ) &&
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) &&
                (
                    Labels == input.Labels ||
                    Labels != null &&
                    input.Labels != null &&
                    Labels.SequenceEqual(input.Labels)
                ) &&
                (
                    ExperimentalBuild == input.ExperimentalBuild ||
                    ExperimentalBuild != null &&
                    ExperimentalBuild.Equals(input.ExperimentalBuild)
                ) &&
                (
                    ServerVersion == input.ServerVersion ||
                    ServerVersion != null &&
                    ServerVersion.Equals(input.ServerVersion)
                ) &&
                (
                    ClusterStore == input.ClusterStore ||
                    ClusterStore != null &&
                    ClusterStore.Equals(input.ClusterStore)
                ) &&
                (
                    ClusterAdvertise == input.ClusterAdvertise ||
                    ClusterAdvertise != null &&
                    ClusterAdvertise.Equals(input.ClusterAdvertise)
                ) &&
                (
                    Runtimes == input.Runtimes ||
                    Runtimes != null &&
                    input.Runtimes != null &&
                    Runtimes.SequenceEqual(input.Runtimes)
                ) &&
                (
                    DefaultRuntime == input.DefaultRuntime ||
                    DefaultRuntime != null &&
                    DefaultRuntime.Equals(input.DefaultRuntime)
                ) &&
                (
                    Swarm == input.Swarm ||
                    Swarm != null &&
                    Swarm.Equals(input.Swarm)
                ) &&
                (
                    LiveRestoreEnabled == input.LiveRestoreEnabled ||
                    LiveRestoreEnabled != null &&
                    LiveRestoreEnabled.Equals(input.LiveRestoreEnabled)
                ) &&
                (
                    Isolation == input.Isolation ||
                    Isolation != null &&
                    Isolation.Equals(input.Isolation)
                ) &&
                (
                    InitBinary == input.InitBinary ||
                    InitBinary != null &&
                    InitBinary.Equals(input.InitBinary)
                ) &&
                (
                    ContainerdCommit == input.ContainerdCommit ||
                    ContainerdCommit != null &&
                    ContainerdCommit.Equals(input.ContainerdCommit)
                ) &&
                (
                    RuncCommit == input.RuncCommit ||
                    RuncCommit != null &&
                    RuncCommit.Equals(input.RuncCommit)
                ) &&
                (
                    InitCommit == input.InitCommit ||
                    InitCommit != null &&
                    InitCommit.Equals(input.InitCommit)
                ) &&
                (
                    SecurityOptions == input.SecurityOptions ||
                    SecurityOptions != null &&
                    input.SecurityOptions != null &&
                    SecurityOptions.SequenceEqual(input.SecurityOptions)
                ) &&
                (
                    ProductLicense == input.ProductLicense ||
                    ProductLicense != null &&
                    ProductLicense.Equals(input.ProductLicense)
                ) &&
                (
                    Warnings == input.Warnings ||
                    Warnings != null &&
                    input.Warnings != null &&
                    Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemInfo {\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Containers: ").Append(Containers).Append("\n");
            sb.Append("  ContainersRunning: ").Append(ContainersRunning).Append("\n");
            sb.Append("  ContainersPaused: ").Append(ContainersPaused).Append("\n");
            sb.Append("  ContainersStopped: ").Append(ContainersStopped).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  DriverStatus: ").Append(DriverStatus).Append("\n");
            sb.Append("  DockerRootDir: ").Append(DockerRootDir).Append("\n");
            sb.Append("  SystemStatus: ").Append(SystemStatus).Append("\n");
            sb.Append("  Plugins: ").Append(Plugins).Append("\n");
            sb.Append("  MemoryLimit: ").Append(MemoryLimit).Append("\n");
            sb.Append("  SwapLimit: ").Append(SwapLimit).Append("\n");
            sb.Append("  KernelMemory: ").Append(KernelMemory).Append("\n");
            sb.Append("  CpuCfsPeriod: ").Append(CpuCfsPeriod).Append("\n");
            sb.Append("  CpuCfsQuota: ").Append(CpuCfsQuota).Append("\n");
            sb.Append("  CPUShares: ").Append(CPUShares).Append("\n");
            sb.Append("  CPUSet: ").Append(CPUSet).Append("\n");
            sb.Append("  PidsLimit: ").Append(PidsLimit).Append("\n");
            sb.Append("  OomKillDisable: ").Append(OomKillDisable).Append("\n");
            sb.Append("  IPv4Forwarding: ").Append(IPv4Forwarding).Append("\n");
            sb.Append("  BridgeNfIptables: ").Append(BridgeNfIptables).Append("\n");
            sb.Append("  BridgeNfIp6tables: ").Append(BridgeNfIp6tables).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  NFd: ").Append(NFd).Append("\n");
            sb.Append("  NGoroutines: ").Append(NGoroutines).Append("\n");
            sb.Append("  SystemTime: ").Append(SystemTime).Append("\n");
            sb.Append("  LoggingDriver: ").Append(LoggingDriver).Append("\n");
            sb.Append("  CgroupDriver: ").Append(CgroupDriver).Append("\n");
            sb.Append("  NEventsListener: ").Append(NEventsListener).Append("\n");
            sb.Append("  KernelVersion: ").Append(KernelVersion).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  OSType: ").Append(OSType).Append("\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  NCPU: ").Append(NCPU).Append("\n");
            sb.Append("  MemTotal: ").Append(MemTotal).Append("\n");
            sb.Append("  IndexServerAddress: ").Append(IndexServerAddress).Append("\n");
            sb.Append("  RegistryConfig: ").Append(RegistryConfig).Append("\n");
            sb.Append("  GenericResources: ").Append(GenericResources).Append("\n");
            sb.Append("  HttpProxy: ").Append(HttpProxy).Append("\n");
            sb.Append("  HttpsProxy: ").Append(HttpsProxy).Append("\n");
            sb.Append("  NoProxy: ").Append(NoProxy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  ExperimentalBuild: ").Append(ExperimentalBuild).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("  ClusterStore: ").Append(ClusterStore).Append("\n");
            sb.Append("  ClusterAdvertise: ").Append(ClusterAdvertise).Append("\n");
            sb.Append("  Runtimes: ").Append(Runtimes).Append("\n");
            sb.Append("  DefaultRuntime: ").Append(DefaultRuntime).Append("\n");
            sb.Append("  Swarm: ").Append(Swarm).Append("\n");
            sb.Append("  LiveRestoreEnabled: ").Append(LiveRestoreEnabled).Append("\n");
            sb.Append("  Isolation: ").Append(Isolation).Append("\n");
            sb.Append("  InitBinary: ").Append(InitBinary).Append("\n");
            sb.Append("  ContainerdCommit: ").Append(ContainerdCommit).Append("\n");
            sb.Append("  RuncCommit: ").Append(RuncCommit).Append("\n");
            sb.Append("  InitCommit: ").Append(InitCommit).Append("\n");
            sb.Append("  SecurityOptions: ").Append(SecurityOptions).Append("\n");
            sb.Append("  ProductLicense: ").Append(ProductLicense).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SystemInfo);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ID != null)
                    hashCode = hashCode * 59 + ID.GetHashCode();
                if (Containers != null)
                    hashCode = hashCode * 59 + Containers.GetHashCode();
                if (ContainersRunning != null)
                    hashCode = hashCode * 59 + ContainersRunning.GetHashCode();
                if (ContainersPaused != null)
                    hashCode = hashCode * 59 + ContainersPaused.GetHashCode();
                if (ContainersStopped != null)
                    hashCode = hashCode * 59 + ContainersStopped.GetHashCode();
                if (Images != null)
                    hashCode = hashCode * 59 + Images.GetHashCode();
                if (Driver != null)
                    hashCode = hashCode * 59 + Driver.GetHashCode();
                if (DriverStatus != null)
                    hashCode = hashCode * 59 + DriverStatus.GetHashCode();
                if (DockerRootDir != null)
                    hashCode = hashCode * 59 + DockerRootDir.GetHashCode();
                if (SystemStatus != null)
                    hashCode = hashCode * 59 + SystemStatus.GetHashCode();
                if (Plugins != null)
                    hashCode = hashCode * 59 + Plugins.GetHashCode();
                if (MemoryLimit != null)
                    hashCode = hashCode * 59 + MemoryLimit.GetHashCode();
                if (SwapLimit != null)
                    hashCode = hashCode * 59 + SwapLimit.GetHashCode();
                if (KernelMemory != null)
                    hashCode = hashCode * 59 + KernelMemory.GetHashCode();
                if (CpuCfsPeriod != null)
                    hashCode = hashCode * 59 + CpuCfsPeriod.GetHashCode();
                if (CpuCfsQuota != null)
                    hashCode = hashCode * 59 + CpuCfsQuota.GetHashCode();
                if (CPUShares != null)
                    hashCode = hashCode * 59 + CPUShares.GetHashCode();
                if (CPUSet != null)
                    hashCode = hashCode * 59 + CPUSet.GetHashCode();
                if (PidsLimit != null)
                    hashCode = hashCode * 59 + PidsLimit.GetHashCode();
                if (OomKillDisable != null)
                    hashCode = hashCode * 59 + OomKillDisable.GetHashCode();
                if (IPv4Forwarding != null)
                    hashCode = hashCode * 59 + IPv4Forwarding.GetHashCode();
                if (BridgeNfIptables != null)
                    hashCode = hashCode * 59 + BridgeNfIptables.GetHashCode();
                if (BridgeNfIp6tables != null)
                    hashCode = hashCode * 59 + BridgeNfIp6tables.GetHashCode();
                if (Debug != null)
                    hashCode = hashCode * 59 + Debug.GetHashCode();
                if (NFd != null)
                    hashCode = hashCode * 59 + NFd.GetHashCode();
                if (NGoroutines != null)
                    hashCode = hashCode * 59 + NGoroutines.GetHashCode();
                if (SystemTime != null)
                    hashCode = hashCode * 59 + SystemTime.GetHashCode();
                if (LoggingDriver != null)
                    hashCode = hashCode * 59 + LoggingDriver.GetHashCode();
                if (CgroupDriver != null)
                    hashCode = hashCode * 59 + CgroupDriver.GetHashCode();
                if (NEventsListener != null)
                    hashCode = hashCode * 59 + NEventsListener.GetHashCode();
                if (KernelVersion != null)
                    hashCode = hashCode * 59 + KernelVersion.GetHashCode();
                if (OperatingSystem != null)
                    hashCode = hashCode * 59 + OperatingSystem.GetHashCode();
                if (OSType != null)
                    hashCode = hashCode * 59 + OSType.GetHashCode();
                if (Architecture != null)
                    hashCode = hashCode * 59 + Architecture.GetHashCode();
                if (NCPU != null)
                    hashCode = hashCode * 59 + NCPU.GetHashCode();
                if (MemTotal != null)
                    hashCode = hashCode * 59 + MemTotal.GetHashCode();
                if (IndexServerAddress != null)
                    hashCode = hashCode * 59 + IndexServerAddress.GetHashCode();
                if (RegistryConfig != null)
                    hashCode = hashCode * 59 + RegistryConfig.GetHashCode();
                if (GenericResources != null)
                    hashCode = hashCode * 59 + GenericResources.GetHashCode();
                if (HttpProxy != null)
                    hashCode = hashCode * 59 + HttpProxy.GetHashCode();
                if (HttpsProxy != null)
                    hashCode = hashCode * 59 + HttpsProxy.GetHashCode();
                if (NoProxy != null)
                    hashCode = hashCode * 59 + NoProxy.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                if (ExperimentalBuild != null)
                    hashCode = hashCode * 59 + ExperimentalBuild.GetHashCode();
                if (ServerVersion != null)
                    hashCode = hashCode * 59 + ServerVersion.GetHashCode();
                if (ClusterStore != null)
                    hashCode = hashCode * 59 + ClusterStore.GetHashCode();
                if (ClusterAdvertise != null)
                    hashCode = hashCode * 59 + ClusterAdvertise.GetHashCode();
                if (Runtimes != null)
                    hashCode = hashCode * 59 + Runtimes.GetHashCode();
                if (DefaultRuntime != null)
                    hashCode = hashCode * 59 + DefaultRuntime.GetHashCode();
                if (Swarm != null)
                    hashCode = hashCode * 59 + Swarm.GetHashCode();
                if (LiveRestoreEnabled != null)
                    hashCode = hashCode * 59 + LiveRestoreEnabled.GetHashCode();
                if (Isolation != null)
                    hashCode = hashCode * 59 + Isolation.GetHashCode();
                if (InitBinary != null)
                    hashCode = hashCode * 59 + InitBinary.GetHashCode();
                if (ContainerdCommit != null)
                    hashCode = hashCode * 59 + ContainerdCommit.GetHashCode();
                if (RuncCommit != null)
                    hashCode = hashCode * 59 + RuncCommit.GetHashCode();
                if (InitCommit != null)
                    hashCode = hashCode * 59 + InitCommit.GetHashCode();
                if (SecurityOptions != null)
                    hashCode = hashCode * 59 + SecurityOptions.GetHashCode();
                if (ProductLicense != null)
                    hashCode = hashCode * 59 + ProductLicense.GetHashCode();
                if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                return hashCode;
            }
        }
    }
}