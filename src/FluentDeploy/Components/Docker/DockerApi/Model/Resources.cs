/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     A container&#39;s resources (cgroups config, ulimits, etc)
    /// </summary>
    [DataContract]
    public class Resources : IEquatable<Resources>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Resources" /> class.
        /// </summary>
        /// <param name="cpuShares">
        ///     An integer value representing this container&#39;s relative CPU weight versus other containers.
        ///     .
        /// </param>
        /// <param name="memory">Memory limit in bytes. (default to 0).</param>
        /// <param name="cgroupParent">
        ///     Path to &#x60;cgroups&#x60; under which the container&#39;s &#x60;cgroup&#x60; is created.
        ///     If the path is not absolute, the path is considered to be relative to the &#x60;cgroups&#x60; path of the init
        ///     process. Cgroups are created if they do not already exist. .
        /// </param>
        /// <param name="blkioWeight">Block IO weight (relative weight)..</param>
        /// <param name="blkioWeightDevice">
        ///     Block IO weight (relative device weight) in the form:  &#x60;&#x60;&#x60; [{\&quot;
        ///     Path\&quot;: \&quot;device_path\&quot;, \&quot;Weight\&quot;: weight}] &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="blkioDeviceReadBps">
        ///     Limit read rate (bytes per second) from a device, in the form:  &#x60;&#x60;&#x60; [{\
        ///     &quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="blkioDeviceWriteBps">
        ///     Limit write rate (bytes per second) to a device, in the form:  &#x60;&#x60;&#x60; [{\
        ///     &quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="blkioDeviceReadIOps">
        ///     Limit read rate (IO per second) from a device, in the form:  &#x60;&#x60;&#x60; [{\
        ///     &quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="blkioDeviceWriteIOps">
        ///     Limit write rate (IO per second) to a device, in the form:  &#x60;&#x60;&#x60; [{\
        ///     &quot;Path\&quot;: \&quot;device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="cpuPeriod">The length of a CPU period in microseconds..</param>
        /// <param name="cpuQuota">Microseconds of CPU time that the container can get in a CPU period. .</param>
        /// <param name="cpuRealtimePeriod">
        ///     The length of a CPU real-time period in microseconds. Set to 0 to allocate no time
        ///     allocated to real-time tasks. .
        /// </param>
        /// <param name="cpuRealtimeRuntime">
        ///     The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time
        ///     allocated to real-time tasks. .
        /// </param>
        /// <param name="cpusetCpus">CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). .</param>
        /// <param name="cpusetMems">Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. .</param>
        /// <param name="devices">A list of devices to add to the container..</param>
        /// <param name="deviceCgroupRules">a list of cgroup rules to apply to the container.</param>
        /// <param name="deviceRequests">A list of requests for devices to be sent to device drivers. .</param>
        /// <param name="kernelMemory">Kernel memory limit in bytes..</param>
        /// <param name="kernelMemoryTCP">Hard limit for kernel TCP buffer memory (in bytes)..</param>
        /// <param name="memoryReservation">Memory soft limit in bytes..</param>
        /// <param name="memorySwap">Total memory limit (memory + swap). Set as &#x60;-1&#x60; to enable unlimited swap. .</param>
        /// <param name="memorySwappiness">
        ///     Tune a container&#39;s memory swappiness behavior. Accepts an integer between 0 and 100.
        ///     .
        /// </param>
        /// <param name="nanoCpus">CPU quota in units of 10&lt;sup&gt;-9&lt;/sup&gt; CPUs..</param>
        /// <param name="oomKillDisable">Disable OOM Killer for the container..</param>
        /// <param name="init">
        ///     Run an init inside the container that forwards signals and reaps processes. This field is omitted if
        ///     empty, and the default (as configured on the daemon) is used. .
        /// </param>
        /// <param name="pidsLimit">
        ///     Tune a container&#39;s PIDs limit. Set &#x60;0&#x60; or &#x60;-1&#x60; for unlimited, or &#x60;
        ///     null&#x60; to not change. .
        /// </param>
        /// <param name="ulimits">
        ///     A list of resource limits to set in the container. For example:  &#x60;&#x60;&#x60; {\&quot;Name\
        ///     &quot;: \&quot;nofile\&quot;, \&quot;Soft\&quot;: 1024, \&quot;Hard\&quot;: 2048} &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="cpuCount">
        ///     The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource
        ///     controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;,
        ///     and &#x60;CPUPercent&#x60; last. .
        /// </param>
        /// <param name="cpuPercent">
        ///     The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the
        ///     processor resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then
        ///     &#x60;CPUShares&#x60;, and &#x60;CPUPercent&#x60; last. .
        /// </param>
        /// <param name="iOMaximumIOps">Maximum IOps for the container system drive (Windows only).</param>
        /// <param name="iOMaximumBandwidth">Maximum IO in bytes per second for the container system drive (Windows only). .</param>
        public Resources(int cpuShares = default, long memory = 0, string cgroupParent = default,
            int blkioWeight = default, List<ResourcesBlkioWeightDevice> blkioWeightDevice = default,
            List<ThrottleDevice> blkioDeviceReadBps = default, List<ThrottleDevice> blkioDeviceWriteBps = default,
            List<ThrottleDevice> blkioDeviceReadIOps = default, List<ThrottleDevice> blkioDeviceWriteIOps = default,
            long cpuPeriod = default, long cpuQuota = default, long cpuRealtimePeriod = default,
            long cpuRealtimeRuntime = default, string cpusetCpus = default, string cpusetMems = default,
            List<DeviceMapping> devices = default, List<string> deviceCgroupRules = default,
            List<DeviceRequest> deviceRequests = default, long kernelMemory = default, long kernelMemoryTCP = default,
            long memoryReservation = default, long memorySwap = default, long memorySwappiness = default,
            long nanoCpus = default, bool oomKillDisable = default, bool? init = default, long? pidsLimit = default,
            List<ResourcesUlimits> ulimits = default, long cpuCount = default, long cpuPercent = default,
            long iOMaximumIOps = default, long iOMaximumBandwidth = default)
        {
            Init = init;
            PidsLimit = pidsLimit;
            CpuShares = cpuShares;
            // use default value if no "memory" provided
            if (memory == null)
                Memory = 0;
            else
                Memory = memory;
            CgroupParent = cgroupParent;
            BlkioWeight = blkioWeight;
            BlkioWeightDevice = blkioWeightDevice;
            BlkioDeviceReadBps = blkioDeviceReadBps;
            BlkioDeviceWriteBps = blkioDeviceWriteBps;
            BlkioDeviceReadIOps = blkioDeviceReadIOps;
            BlkioDeviceWriteIOps = blkioDeviceWriteIOps;
            CpuPeriod = cpuPeriod;
            CpuQuota = cpuQuota;
            CpuRealtimePeriod = cpuRealtimePeriod;
            CpuRealtimeRuntime = cpuRealtimeRuntime;
            CpusetCpus = cpusetCpus;
            CpusetMems = cpusetMems;
            Devices = devices;
            DeviceCgroupRules = deviceCgroupRules;
            DeviceRequests = deviceRequests;
            KernelMemory = kernelMemory;
            KernelMemoryTCP = kernelMemoryTCP;
            MemoryReservation = memoryReservation;
            MemorySwap = memorySwap;
            MemorySwappiness = memorySwappiness;
            NanoCpus = nanoCpus;
            OomKillDisable = oomKillDisable;
            Init = init;
            PidsLimit = pidsLimit;
            Ulimits = ulimits;
            CpuCount = cpuCount;
            CpuPercent = cpuPercent;
            IOMaximumIOps = iOMaximumIOps;
            IOMaximumBandwidth = iOMaximumBandwidth;
        }

        /// <summary>
        ///     An integer value representing this container&#39;s relative CPU weight versus other containers.
        /// </summary>
        /// <value>An integer value representing this container&#39;s relative CPU weight versus other containers. </value>
        [DataMember(Name = "CpuShares", EmitDefaultValue = false)]
        public int CpuShares { get; set; }

        /// <summary>
        ///     Memory limit in bytes.
        /// </summary>
        /// <value>Memory limit in bytes.</value>
        [DataMember(Name = "Memory", EmitDefaultValue = false)]
        public long Memory { get; set; }

        /// <summary>
        ///     Path to &#x60;cgroups&#x60; under which the container&#39;s &#x60;cgroup&#x60; is created. If the path is not
        ///     absolute, the path is considered to be relative to the &#x60;cgroups&#x60; path of the init process. Cgroups are
        ///     created if they do not already exist.
        /// </summary>
        /// <value>
        ///     Path to &#x60;cgroups&#x60; under which the container&#39;s &#x60;cgroup&#x60; is created. If the path is not
        ///     absolute, the path is considered to be relative to the &#x60;cgroups&#x60; path of the init process. Cgroups are
        ///     created if they do not already exist.
        /// </value>
        [DataMember(Name = "CgroupParent", EmitDefaultValue = false)]
        public string CgroupParent { get; set; }

        /// <summary>
        ///     Block IO weight (relative weight).
        /// </summary>
        /// <value>Block IO weight (relative weight).</value>
        [DataMember(Name = "BlkioWeight", EmitDefaultValue = false)]
        public int BlkioWeight { get; set; }

        /// <summary>
        ///     Block IO weight (relative device weight) in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;device_path\
        ///     &quot;, \&quot;Weight\&quot;: weight}] &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>
        ///     Block IO weight (relative device weight) in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Weight\&quot;: weight}] &#x60;&#x60;&#x60;
        /// </value>
        [DataMember(Name = "BlkioWeightDevice", EmitDefaultValue = false)]
        public List<ResourcesBlkioWeightDevice> BlkioWeightDevice { get; set; }

        /// <summary>
        ///     Limit read rate (bytes per second) from a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>
        ///     Limit read rate (bytes per second) from a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </value>
        [DataMember(Name = "BlkioDeviceReadBps", EmitDefaultValue = false)]
        public List<ThrottleDevice> BlkioDeviceReadBps { get; set; }

        /// <summary>
        ///     Limit write rate (bytes per second) to a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>
        ///     Limit write rate (bytes per second) to a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </value>
        [DataMember(Name = "BlkioDeviceWriteBps", EmitDefaultValue = false)]
        public List<ThrottleDevice> BlkioDeviceWriteBps { get; set; }

        /// <summary>
        ///     Limit read rate (IO per second) from a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>
        ///     Limit read rate (IO per second) from a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </value>
        [DataMember(Name = "BlkioDeviceReadIOps", EmitDefaultValue = false)]
        public List<ThrottleDevice> BlkioDeviceReadIOps { get; set; }

        /// <summary>
        ///     Limit write rate (IO per second) to a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>
        ///     Limit write rate (IO per second) to a device, in the form:  &#x60;&#x60;&#x60; [{\&quot;Path\&quot;: \&quot;
        ///     device_path\&quot;, \&quot;Rate\&quot;: rate}] &#x60;&#x60;&#x60;
        /// </value>
        [DataMember(Name = "BlkioDeviceWriteIOps", EmitDefaultValue = false)]
        public List<ThrottleDevice> BlkioDeviceWriteIOps { get; set; }

        /// <summary>
        ///     The length of a CPU period in microseconds.
        /// </summary>
        /// <value>The length of a CPU period in microseconds.</value>
        [DataMember(Name = "CpuPeriod", EmitDefaultValue = false)]
        public long CpuPeriod { get; set; }

        /// <summary>
        ///     Microseconds of CPU time that the container can get in a CPU period.
        /// </summary>
        /// <value>Microseconds of CPU time that the container can get in a CPU period. </value>
        [DataMember(Name = "CpuQuota", EmitDefaultValue = false)]
        public long CpuQuota { get; set; }

        /// <summary>
        ///     The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
        /// </summary>
        /// <value>The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. </value>
        [DataMember(Name = "CpuRealtimePeriod", EmitDefaultValue = false)]
        public long CpuRealtimePeriod { get; set; }

        /// <summary>
        ///     The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
        /// </summary>
        /// <value>
        ///     The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time
        ///     tasks.
        /// </value>
        [DataMember(Name = "CpuRealtimeRuntime", EmitDefaultValue = false)]
        public long CpuRealtimeRuntime { get; set; }

        /// <summary>
        ///     CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
        /// </summary>
        /// <value>CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;). </value>
        [DataMember(Name = "CpusetCpus", EmitDefaultValue = false)]
        public string CpusetCpus { get; set; }

        /// <summary>
        ///     Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
        /// </summary>
        /// <value>Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. </value>
        [DataMember(Name = "CpusetMems", EmitDefaultValue = false)]
        public string CpusetMems { get; set; }

        /// <summary>
        ///     A list of devices to add to the container.
        /// </summary>
        /// <value>A list of devices to add to the container.</value>
        [DataMember(Name = "Devices", EmitDefaultValue = false)]
        public List<DeviceMapping> Devices { get; set; }

        /// <summary>
        ///     a list of cgroup rules to apply to the container
        /// </summary>
        /// <value>a list of cgroup rules to apply to the container</value>
        [DataMember(Name = "DeviceCgroupRules", EmitDefaultValue = false)]
        public List<string> DeviceCgroupRules { get; set; }

        /// <summary>
        ///     A list of requests for devices to be sent to device drivers.
        /// </summary>
        /// <value>A list of requests for devices to be sent to device drivers. </value>
        [DataMember(Name = "DeviceRequests", EmitDefaultValue = false)]
        public List<DeviceRequest> DeviceRequests { get; set; }

        /// <summary>
        ///     Kernel memory limit in bytes.
        /// </summary>
        /// <value>Kernel memory limit in bytes.</value>
        [DataMember(Name = "KernelMemory", EmitDefaultValue = false)]
        public long KernelMemory { get; set; }

        /// <summary>
        ///     Hard limit for kernel TCP buffer memory (in bytes).
        /// </summary>
        /// <value>Hard limit for kernel TCP buffer memory (in bytes).</value>
        [DataMember(Name = "KernelMemoryTCP", EmitDefaultValue = false)]
        public long KernelMemoryTCP { get; set; }

        /// <summary>
        ///     Memory soft limit in bytes.
        /// </summary>
        /// <value>Memory soft limit in bytes.</value>
        [DataMember(Name = "MemoryReservation", EmitDefaultValue = false)]
        public long MemoryReservation { get; set; }

        /// <summary>
        ///     Total memory limit (memory + swap). Set as &#x60;-1&#x60; to enable unlimited swap.
        /// </summary>
        /// <value>Total memory limit (memory + swap). Set as &#x60;-1&#x60; to enable unlimited swap. </value>
        [DataMember(Name = "MemorySwap", EmitDefaultValue = false)]
        public long MemorySwap { get; set; }

        /// <summary>
        ///     Tune a container&#39;s memory swappiness behavior. Accepts an integer between 0 and 100.
        /// </summary>
        /// <value>Tune a container&#39;s memory swappiness behavior. Accepts an integer between 0 and 100. </value>
        [DataMember(Name = "MemorySwappiness", EmitDefaultValue = false)]
        public long MemorySwappiness { get; set; }

        /// <summary>
        ///     CPU quota in units of 10&lt;sup&gt;-9&lt;/sup&gt; CPUs.
        /// </summary>
        /// <value>CPU quota in units of 10&lt;sup&gt;-9&lt;/sup&gt; CPUs.</value>
        [DataMember(Name = "NanoCpus", EmitDefaultValue = false)]
        public long NanoCpus { get; set; }

        /// <summary>
        ///     Disable OOM Killer for the container.
        /// </summary>
        /// <value>Disable OOM Killer for the container.</value>
        [DataMember(Name = "OomKillDisable", EmitDefaultValue = false)]
        public bool OomKillDisable { get; set; }

        /// <summary>
        ///     Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the
        ///     default (as configured on the daemon) is used.
        /// </summary>
        /// <value>
        ///     Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and
        ///     the default (as configured on the daemon) is used.
        /// </value>
        [DataMember(Name = "Init", EmitDefaultValue = true)]
        public bool? Init { get; set; }

        /// <summary>
        ///     Tune a container&#39;s PIDs limit. Set &#x60;0&#x60; or &#x60;-1&#x60; for unlimited, or &#x60;null&#x60; to not
        ///     change.
        /// </summary>
        /// <value>
        ///     Tune a container&#39;s PIDs limit. Set &#x60;0&#x60; or &#x60;-1&#x60; for unlimited, or &#x60;null&#x60; to not
        ///     change.
        /// </value>
        [DataMember(Name = "PidsLimit", EmitDefaultValue = true)]
        public long? PidsLimit { get; set; }

        /// <summary>
        ///     A list of resource limits to set in the container. For example:  &#x60;&#x60;&#x60; {\&quot;Name\&quot;: \&quot;
        ///     nofile\&quot;, \&quot;Soft\&quot;: 1024, \&quot;Hard\&quot;: 2048} &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>
        ///     A list of resource limits to set in the container. For example:  &#x60;&#x60;&#x60; {\&quot;Name\&quot;: \&quot;
        ///     nofile\&quot;, \&quot;Soft\&quot;: 1024, \&quot;Hard\&quot;: 2048} &#x60;&#x60;&#x60;
        /// </value>
        [DataMember(Name = "Ulimits", EmitDefaultValue = false)]
        public List<ResourcesUlimits> Ulimits { get; set; }

        /// <summary>
        ///     The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are
        ///     mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;
        ///     CPUPercent&#x60; last.
        /// </summary>
        /// <value>
        ///     The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are
        ///     mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;, and &#x60;
        ///     CPUPercent&#x60; last.
        /// </value>
        [DataMember(Name = "CpuCount", EmitDefaultValue = false)]
        public long CpuCount { get; set; }

        /// <summary>
        ///     The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource
        ///     controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;CPUShares&#x60;,
        ///     and &#x60;CPUPercent&#x60; last.
        /// </summary>
        /// <value>
        ///     The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor
        ///     resource controls are mutually exclusive. The order of precedence is &#x60;CPUCount&#x60; first, then &#x60;
        ///     CPUShares&#x60;, and &#x60;CPUPercent&#x60; last.
        /// </value>
        [DataMember(Name = "CpuPercent", EmitDefaultValue = false)]
        public long CpuPercent { get; set; }

        /// <summary>
        ///     Maximum IOps for the container system drive (Windows only)
        /// </summary>
        /// <value>Maximum IOps for the container system drive (Windows only)</value>
        [DataMember(Name = "IOMaximumIOps", EmitDefaultValue = false)]
        public long IOMaximumIOps { get; set; }

        /// <summary>
        ///     Maximum IO in bytes per second for the container system drive (Windows only).
        /// </summary>
        /// <value>Maximum IO in bytes per second for the container system drive (Windows only). </value>
        [DataMember(Name = "IOMaximumBandwidth", EmitDefaultValue = false)]
        public long IOMaximumBandwidth { get; set; }

        /// <summary>
        ///     Returns true if Resources instances are equal
        /// </summary>
        /// <param name="input">Instance of Resources to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Resources input)
        {
            if (input == null)
                return false;

            return
                (
                    CpuShares == input.CpuShares ||
                    CpuShares != null &&
                    CpuShares.Equals(input.CpuShares)
                ) &&
                (
                    Memory == input.Memory ||
                    Memory != null &&
                    Memory.Equals(input.Memory)
                ) &&
                (
                    CgroupParent == input.CgroupParent ||
                    CgroupParent != null &&
                    CgroupParent.Equals(input.CgroupParent)
                ) &&
                (
                    BlkioWeight == input.BlkioWeight ||
                    BlkioWeight != null &&
                    BlkioWeight.Equals(input.BlkioWeight)
                ) &&
                (
                    BlkioWeightDevice == input.BlkioWeightDevice ||
                    BlkioWeightDevice != null &&
                    input.BlkioWeightDevice != null &&
                    BlkioWeightDevice.SequenceEqual(input.BlkioWeightDevice)
                ) &&
                (
                    BlkioDeviceReadBps == input.BlkioDeviceReadBps ||
                    BlkioDeviceReadBps != null &&
                    input.BlkioDeviceReadBps != null &&
                    BlkioDeviceReadBps.SequenceEqual(input.BlkioDeviceReadBps)
                ) &&
                (
                    BlkioDeviceWriteBps == input.BlkioDeviceWriteBps ||
                    BlkioDeviceWriteBps != null &&
                    input.BlkioDeviceWriteBps != null &&
                    BlkioDeviceWriteBps.SequenceEqual(input.BlkioDeviceWriteBps)
                ) &&
                (
                    BlkioDeviceReadIOps == input.BlkioDeviceReadIOps ||
                    BlkioDeviceReadIOps != null &&
                    input.BlkioDeviceReadIOps != null &&
                    BlkioDeviceReadIOps.SequenceEqual(input.BlkioDeviceReadIOps)
                ) &&
                (
                    BlkioDeviceWriteIOps == input.BlkioDeviceWriteIOps ||
                    BlkioDeviceWriteIOps != null &&
                    input.BlkioDeviceWriteIOps != null &&
                    BlkioDeviceWriteIOps.SequenceEqual(input.BlkioDeviceWriteIOps)
                ) &&
                (
                    CpuPeriod == input.CpuPeriod ||
                    CpuPeriod != null &&
                    CpuPeriod.Equals(input.CpuPeriod)
                ) &&
                (
                    CpuQuota == input.CpuQuota ||
                    CpuQuota != null &&
                    CpuQuota.Equals(input.CpuQuota)
                ) &&
                (
                    CpuRealtimePeriod == input.CpuRealtimePeriod ||
                    CpuRealtimePeriod != null &&
                    CpuRealtimePeriod.Equals(input.CpuRealtimePeriod)
                ) &&
                (
                    CpuRealtimeRuntime == input.CpuRealtimeRuntime ||
                    CpuRealtimeRuntime != null &&
                    CpuRealtimeRuntime.Equals(input.CpuRealtimeRuntime)
                ) &&
                (
                    CpusetCpus == input.CpusetCpus ||
                    CpusetCpus != null &&
                    CpusetCpus.Equals(input.CpusetCpus)
                ) &&
                (
                    CpusetMems == input.CpusetMems ||
                    CpusetMems != null &&
                    CpusetMems.Equals(input.CpusetMems)
                ) &&
                (
                    Devices == input.Devices ||
                    Devices != null &&
                    input.Devices != null &&
                    Devices.SequenceEqual(input.Devices)
                ) &&
                (
                    DeviceCgroupRules == input.DeviceCgroupRules ||
                    DeviceCgroupRules != null &&
                    input.DeviceCgroupRules != null &&
                    DeviceCgroupRules.SequenceEqual(input.DeviceCgroupRules)
                ) &&
                (
                    DeviceRequests == input.DeviceRequests ||
                    DeviceRequests != null &&
                    input.DeviceRequests != null &&
                    DeviceRequests.SequenceEqual(input.DeviceRequests)
                ) &&
                (
                    KernelMemory == input.KernelMemory ||
                    KernelMemory != null &&
                    KernelMemory.Equals(input.KernelMemory)
                ) &&
                (
                    KernelMemoryTCP == input.KernelMemoryTCP ||
                    KernelMemoryTCP != null &&
                    KernelMemoryTCP.Equals(input.KernelMemoryTCP)
                ) &&
                (
                    MemoryReservation == input.MemoryReservation ||
                    MemoryReservation != null &&
                    MemoryReservation.Equals(input.MemoryReservation)
                ) &&
                (
                    MemorySwap == input.MemorySwap ||
                    MemorySwap != null &&
                    MemorySwap.Equals(input.MemorySwap)
                ) &&
                (
                    MemorySwappiness == input.MemorySwappiness ||
                    MemorySwappiness != null &&
                    MemorySwappiness.Equals(input.MemorySwappiness)
                ) &&
                (
                    NanoCpus == input.NanoCpus ||
                    NanoCpus != null &&
                    NanoCpus.Equals(input.NanoCpus)
                ) &&
                (
                    OomKillDisable == input.OomKillDisable ||
                    OomKillDisable != null &&
                    OomKillDisable.Equals(input.OomKillDisable)
                ) &&
                (
                    Init == input.Init ||
                    Init != null &&
                    Init.Equals(input.Init)
                ) &&
                (
                    PidsLimit == input.PidsLimit ||
                    PidsLimit != null &&
                    PidsLimit.Equals(input.PidsLimit)
                ) &&
                (
                    Ulimits == input.Ulimits ||
                    Ulimits != null &&
                    input.Ulimits != null &&
                    Ulimits.SequenceEqual(input.Ulimits)
                ) &&
                (
                    CpuCount == input.CpuCount ||
                    CpuCount != null &&
                    CpuCount.Equals(input.CpuCount)
                ) &&
                (
                    CpuPercent == input.CpuPercent ||
                    CpuPercent != null &&
                    CpuPercent.Equals(input.CpuPercent)
                ) &&
                (
                    IOMaximumIOps == input.IOMaximumIOps ||
                    IOMaximumIOps != null &&
                    IOMaximumIOps.Equals(input.IOMaximumIOps)
                ) &&
                (
                    IOMaximumBandwidth == input.IOMaximumBandwidth ||
                    IOMaximumBandwidth != null &&
                    IOMaximumBandwidth.Equals(input.IOMaximumBandwidth)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BlkioWeight (int) maximum
            if (BlkioWeight > 1000)
                yield return new ValidationResult(
                    "Invalid value for BlkioWeight, must be a value less than or equal to 1000.",
                    new[] {"BlkioWeight"});

            // BlkioWeight (int) minimum
            if (BlkioWeight < 0)
                yield return new ValidationResult(
                    "Invalid value for BlkioWeight, must be a value greater than or equal to 0.",
                    new[] {"BlkioWeight"});


            // MemorySwappiness (long) maximum
            if (MemorySwappiness > 100)
                yield return new ValidationResult(
                    "Invalid value for MemorySwappiness, must be a value less than or equal to 100.",
                    new[] {"MemorySwappiness"});

            // MemorySwappiness (long) minimum
            if (MemorySwappiness < 0)
                yield return new ValidationResult(
                    "Invalid value for MemorySwappiness, must be a value greater than or equal to 0.",
                    new[] {"MemorySwappiness"});
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Resources {\n");
            sb.Append("  CpuShares: ").Append(CpuShares).Append("\n");
            sb.Append("  Memory: ").Append(Memory).Append("\n");
            sb.Append("  CgroupParent: ").Append(CgroupParent).Append("\n");
            sb.Append("  BlkioWeight: ").Append(BlkioWeight).Append("\n");
            sb.Append("  BlkioWeightDevice: ").Append(BlkioWeightDevice).Append("\n");
            sb.Append("  BlkioDeviceReadBps: ").Append(BlkioDeviceReadBps).Append("\n");
            sb.Append("  BlkioDeviceWriteBps: ").Append(BlkioDeviceWriteBps).Append("\n");
            sb.Append("  BlkioDeviceReadIOps: ").Append(BlkioDeviceReadIOps).Append("\n");
            sb.Append("  BlkioDeviceWriteIOps: ").Append(BlkioDeviceWriteIOps).Append("\n");
            sb.Append("  CpuPeriod: ").Append(CpuPeriod).Append("\n");
            sb.Append("  CpuQuota: ").Append(CpuQuota).Append("\n");
            sb.Append("  CpuRealtimePeriod: ").Append(CpuRealtimePeriod).Append("\n");
            sb.Append("  CpuRealtimeRuntime: ").Append(CpuRealtimeRuntime).Append("\n");
            sb.Append("  CpusetCpus: ").Append(CpusetCpus).Append("\n");
            sb.Append("  CpusetMems: ").Append(CpusetMems).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  DeviceCgroupRules: ").Append(DeviceCgroupRules).Append("\n");
            sb.Append("  DeviceRequests: ").Append(DeviceRequests).Append("\n");
            sb.Append("  KernelMemory: ").Append(KernelMemory).Append("\n");
            sb.Append("  KernelMemoryTCP: ").Append(KernelMemoryTCP).Append("\n");
            sb.Append("  MemoryReservation: ").Append(MemoryReservation).Append("\n");
            sb.Append("  MemorySwap: ").Append(MemorySwap).Append("\n");
            sb.Append("  MemorySwappiness: ").Append(MemorySwappiness).Append("\n");
            sb.Append("  NanoCpus: ").Append(NanoCpus).Append("\n");
            sb.Append("  OomKillDisable: ").Append(OomKillDisable).Append("\n");
            sb.Append("  Init: ").Append(Init).Append("\n");
            sb.Append("  PidsLimit: ").Append(PidsLimit).Append("\n");
            sb.Append("  Ulimits: ").Append(Ulimits).Append("\n");
            sb.Append("  CpuCount: ").Append(CpuCount).Append("\n");
            sb.Append("  CpuPercent: ").Append(CpuPercent).Append("\n");
            sb.Append("  IOMaximumIOps: ").Append(IOMaximumIOps).Append("\n");
            sb.Append("  IOMaximumBandwidth: ").Append(IOMaximumBandwidth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Resources);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CpuShares != null)
                    hashCode = hashCode * 59 + CpuShares.GetHashCode();
                if (Memory != null)
                    hashCode = hashCode * 59 + Memory.GetHashCode();
                if (CgroupParent != null)
                    hashCode = hashCode * 59 + CgroupParent.GetHashCode();
                if (BlkioWeight != null)
                    hashCode = hashCode * 59 + BlkioWeight.GetHashCode();
                if (BlkioWeightDevice != null)
                    hashCode = hashCode * 59 + BlkioWeightDevice.GetHashCode();
                if (BlkioDeviceReadBps != null)
                    hashCode = hashCode * 59 + BlkioDeviceReadBps.GetHashCode();
                if (BlkioDeviceWriteBps != null)
                    hashCode = hashCode * 59 + BlkioDeviceWriteBps.GetHashCode();
                if (BlkioDeviceReadIOps != null)
                    hashCode = hashCode * 59 + BlkioDeviceReadIOps.GetHashCode();
                if (BlkioDeviceWriteIOps != null)
                    hashCode = hashCode * 59 + BlkioDeviceWriteIOps.GetHashCode();
                if (CpuPeriod != null)
                    hashCode = hashCode * 59 + CpuPeriod.GetHashCode();
                if (CpuQuota != null)
                    hashCode = hashCode * 59 + CpuQuota.GetHashCode();
                if (CpuRealtimePeriod != null)
                    hashCode = hashCode * 59 + CpuRealtimePeriod.GetHashCode();
                if (CpuRealtimeRuntime != null)
                    hashCode = hashCode * 59 + CpuRealtimeRuntime.GetHashCode();
                if (CpusetCpus != null)
                    hashCode = hashCode * 59 + CpusetCpus.GetHashCode();
                if (CpusetMems != null)
                    hashCode = hashCode * 59 + CpusetMems.GetHashCode();
                if (Devices != null)
                    hashCode = hashCode * 59 + Devices.GetHashCode();
                if (DeviceCgroupRules != null)
                    hashCode = hashCode * 59 + DeviceCgroupRules.GetHashCode();
                if (DeviceRequests != null)
                    hashCode = hashCode * 59 + DeviceRequests.GetHashCode();
                if (KernelMemory != null)
                    hashCode = hashCode * 59 + KernelMemory.GetHashCode();
                if (KernelMemoryTCP != null)
                    hashCode = hashCode * 59 + KernelMemoryTCP.GetHashCode();
                if (MemoryReservation != null)
                    hashCode = hashCode * 59 + MemoryReservation.GetHashCode();
                if (MemorySwap != null)
                    hashCode = hashCode * 59 + MemorySwap.GetHashCode();
                if (MemorySwappiness != null)
                    hashCode = hashCode * 59 + MemorySwappiness.GetHashCode();
                if (NanoCpus != null)
                    hashCode = hashCode * 59 + NanoCpus.GetHashCode();
                if (OomKillDisable != null)
                    hashCode = hashCode * 59 + OomKillDisable.GetHashCode();
                if (Init != null)
                    hashCode = hashCode * 59 + Init.GetHashCode();
                if (PidsLimit != null)
                    hashCode = hashCode * 59 + PidsLimit.GetHashCode();
                if (Ulimits != null)
                    hashCode = hashCode * 59 + Ulimits.GetHashCode();
                if (CpuCount != null)
                    hashCode = hashCode * 59 + CpuCount.GetHashCode();
                if (CpuPercent != null)
                    hashCode = hashCode * 59 + CpuPercent.GetHashCode();
                if (IOMaximumIOps != null)
                    hashCode = hashCode * 59 + IOMaximumIOps.GetHashCode();
                if (IOMaximumBandwidth != null)
                    hashCode = hashCode * 59 + IOMaximumBandwidth.GetHashCode();
                return hashCode;
            }
        }
    }
}