/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     InlineObject5
    /// </summary>
    [DataContract]
    public class InlineObject5 : IEquatable<InlineObject5>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InlineObject5" /> class.
        /// </summary>
        /// <param name="listenAddr">
        ///     Listen address used for inter-manager communication, as well as determining the networking
        ///     interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form
        ///     &#x60;192.168.1.1:4567&#x60;, or an interface followed by a port number, like &#x60;eth0:4567&#x60;. If the port
        ///     number is omitted, the default swarm listening port is used. .
        /// </param>
        /// <param name="advertiseAddr">
        ///     Externally reachable address advertised to other nodes. This can either be an address/port
        ///     combination in the form &#x60;192.168.1.1:4567&#x60;, or an interface followed by a port number, like &#x60;
        ///     eth0:4567&#x60;. If the port number is omitted, the port number from the listen address is used. If &#x60;
        ///     AdvertiseAddr&#x60; is not specified, it will be automatically detected when possible. .
        /// </param>
        /// <param name="dataPathAddr">
        ///     Address or interface to use for data path traffic (format: &#x60;&lt;ip|interface&gt;&#x60;
        ///     ), for example,  &#x60;192.168.1.1&#x60;, or an interface, like &#x60;eth0&#x60;. If &#x60;DataPathAddr&#x60; is
        ///     unspecified, the same address as &#x60;AdvertiseAddr&#x60; is used.  The &#x60;DataPathAddr&#x60; specifies the
        ///     address that global scope network drivers will publish towards other  nodes in order to reach the containers
        ///     running on this node. Using this parameter it is possible to separate the container data traffic from the
        ///     management traffic of the cluster. .
        /// </param>
        /// <param name="dataPathPort">
        ///     DataPathPort specifies the data path port number for data traffic. Acceptable port range is
        ///     1024 to 49151. if no port is set or is set to 0, default port 4789 will be used. .
        /// </param>
        /// <param name="defaultAddrPool">Default Address Pool specifies default subnet pools for global scope networks. .</param>
        /// <param name="forceNewCluster">Force creation of a new swarm..</param>
        /// <param name="subnetSize">SubnetSize specifies the subnet size of the networks created from the default subnet pool. .</param>
        /// <param name="spec">spec.</param>
        public InlineObject5(string listenAddr = default, string advertiseAddr = default, string dataPathAddr = default,
            int dataPathPort = default, List<string> defaultAddrPool = default, bool forceNewCluster = default,
            int subnetSize = default, SwarmSpec spec = default)
        {
            ListenAddr = listenAddr;
            AdvertiseAddr = advertiseAddr;
            DataPathAddr = dataPathAddr;
            DataPathPort = dataPathPort;
            DefaultAddrPool = defaultAddrPool;
            ForceNewCluster = forceNewCluster;
            SubnetSize = subnetSize;
            Spec = spec;
        }

        /// <summary>
        ///     Listen address used for inter-manager communication, as well as determining the networking interface used for the
        ///     VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form &#x60;192.168.1.1:4567
        ///     &#x60;, or an interface followed by a port number, like &#x60;eth0:4567&#x60;. If the port number is omitted, the
        ///     default swarm listening port is used.
        /// </summary>
        /// <value>
        ///     Listen address used for inter-manager communication, as well as determining the networking interface used for
        ///     the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form &#x60;192.168.1.1:4567
        ///     &#x60;, or an interface followed by a port number, like &#x60;eth0:4567&#x60;. If the port number is omitted, the
        ///     default swarm listening port is used.
        /// </value>
        [DataMember(Name = "ListenAddr", EmitDefaultValue = false)]
        public string ListenAddr { get; set; }

        /// <summary>
        ///     Externally reachable address advertised to other nodes. This can either be an address/port combination in the form
        ///     &#x60;192.168.1.1:4567&#x60;, or an interface followed by a port number, like &#x60;eth0:4567&#x60;. If the port
        ///     number is omitted, the port number from the listen address is used. If &#x60;AdvertiseAddr&#x60; is not specified,
        ///     it will be automatically detected when possible.
        /// </summary>
        /// <value>
        ///     Externally reachable address advertised to other nodes. This can either be an address/port combination in the
        ///     form &#x60;192.168.1.1:4567&#x60;, or an interface followed by a port number, like &#x60;eth0:4567&#x60;. If the
        ///     port number is omitted, the port number from the listen address is used. If &#x60;AdvertiseAddr&#x60; is not
        ///     specified, it will be automatically detected when possible.
        /// </value>
        [DataMember(Name = "AdvertiseAddr", EmitDefaultValue = false)]
        public string AdvertiseAddr { get; set; }

        /// <summary>
        ///     Address or interface to use for data path traffic (format: &#x60;&lt;ip|interface&gt;&#x60;), for example,  &#x60;
        ///     192.168.1.1&#x60;, or an interface, like &#x60;eth0&#x60;. If &#x60;DataPathAddr&#x60; is unspecified, the same
        ///     address as &#x60;AdvertiseAddr&#x60; is used.  The &#x60;DataPathAddr&#x60; specifies the address that global scope
        ///     network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this
        ///     parameter it is possible to separate the container data traffic from the management traffic of the cluster.
        /// </summary>
        /// <value>
        ///     Address or interface to use for data path traffic (format: &#x60;&lt;ip|interface&gt;&#x60;), for example,
        ///     &#x60;192.168.1.1&#x60;, or an interface, like &#x60;eth0&#x60;. If &#x60;DataPathAddr&#x60; is unspecified, the
        ///     same address as &#x60;AdvertiseAddr&#x60; is used.  The &#x60;DataPathAddr&#x60; specifies the address that global
        ///     scope network drivers will publish towards other  nodes in order to reach the containers running on this node.
        ///     Using this parameter it is possible to separate the container data traffic from the management traffic of the
        ///     cluster.
        /// </value>
        [DataMember(Name = "DataPathAddr", EmitDefaultValue = false)]
        public string DataPathAddr { get; set; }

        /// <summary>
        ///     DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no
        ///     port is set or is set to 0, default port 4789 will be used.
        /// </summary>
        /// <value>
        ///     DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no
        ///     port is set or is set to 0, default port 4789 will be used.
        /// </value>
        [DataMember(Name = "DataPathPort", EmitDefaultValue = false)]
        public int DataPathPort { get; set; }

        /// <summary>
        ///     Default Address Pool specifies default subnet pools for global scope networks.
        /// </summary>
        /// <value>Default Address Pool specifies default subnet pools for global scope networks. </value>
        [DataMember(Name = "DefaultAddrPool", EmitDefaultValue = false)]
        public List<string> DefaultAddrPool { get; set; }

        /// <summary>
        ///     Force creation of a new swarm.
        /// </summary>
        /// <value>Force creation of a new swarm.</value>
        [DataMember(Name = "ForceNewCluster", EmitDefaultValue = false)]
        public bool ForceNewCluster { get; set; }

        /// <summary>
        ///     SubnetSize specifies the subnet size of the networks created from the default subnet pool.
        /// </summary>
        /// <value>SubnetSize specifies the subnet size of the networks created from the default subnet pool. </value>
        [DataMember(Name = "SubnetSize", EmitDefaultValue = false)]
        public int SubnetSize { get; set; }

        /// <summary>
        ///     Gets or Sets Spec
        /// </summary>
        [DataMember(Name = "Spec", EmitDefaultValue = false)]
        public SwarmSpec Spec { get; set; }

        /// <summary>
        ///     Returns true if InlineObject5 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject5 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject5 input)
        {
            if (input == null)
                return false;

            return
                (
                    ListenAddr == input.ListenAddr ||
                    ListenAddr != null &&
                    ListenAddr.Equals(input.ListenAddr)
                ) &&
                (
                    AdvertiseAddr == input.AdvertiseAddr ||
                    AdvertiseAddr != null &&
                    AdvertiseAddr.Equals(input.AdvertiseAddr)
                ) &&
                (
                    DataPathAddr == input.DataPathAddr ||
                    DataPathAddr != null &&
                    DataPathAddr.Equals(input.DataPathAddr)
                ) &&
                (
                    DataPathPort == input.DataPathPort ||
                    DataPathPort != null &&
                    DataPathPort.Equals(input.DataPathPort)
                ) &&
                (
                    DefaultAddrPool == input.DefaultAddrPool ||
                    DefaultAddrPool != null &&
                    input.DefaultAddrPool != null &&
                    DefaultAddrPool.SequenceEqual(input.DefaultAddrPool)
                ) &&
                (
                    ForceNewCluster == input.ForceNewCluster ||
                    ForceNewCluster != null &&
                    ForceNewCluster.Equals(input.ForceNewCluster)
                ) &&
                (
                    SubnetSize == input.SubnetSize ||
                    SubnetSize != null &&
                    SubnetSize.Equals(input.SubnetSize)
                ) &&
                (
                    Spec == input.Spec ||
                    Spec != null &&
                    Spec.Equals(input.Spec)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject5 {\n");
            sb.Append("  ListenAddr: ").Append(ListenAddr).Append("\n");
            sb.Append("  AdvertiseAddr: ").Append(AdvertiseAddr).Append("\n");
            sb.Append("  DataPathAddr: ").Append(DataPathAddr).Append("\n");
            sb.Append("  DataPathPort: ").Append(DataPathPort).Append("\n");
            sb.Append("  DefaultAddrPool: ").Append(DefaultAddrPool).Append("\n");
            sb.Append("  ForceNewCluster: ").Append(ForceNewCluster).Append("\n");
            sb.Append("  SubnetSize: ").Append(SubnetSize).Append("\n");
            sb.Append("  Spec: ").Append(Spec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InlineObject5);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ListenAddr != null)
                    hashCode = hashCode * 59 + ListenAddr.GetHashCode();
                if (AdvertiseAddr != null)
                    hashCode = hashCode * 59 + AdvertiseAddr.GetHashCode();
                if (DataPathAddr != null)
                    hashCode = hashCode * 59 + DataPathAddr.GetHashCode();
                if (DataPathPort != null)
                    hashCode = hashCode * 59 + DataPathPort.GetHashCode();
                if (DefaultAddrPool != null)
                    hashCode = hashCode * 59 + DefaultAddrPool.GetHashCode();
                if (ForceNewCluster != null)
                    hashCode = hashCode * 59 + ForceNewCluster.GetHashCode();
                if (SubnetSize != null)
                    hashCode = hashCode * 59 + SubnetSize.GetHashCode();
                if (Spec != null)
                    hashCode = hashCode * 59 + Spec.GetHashCode();
                return hashCode;
            }
        }
    }
}