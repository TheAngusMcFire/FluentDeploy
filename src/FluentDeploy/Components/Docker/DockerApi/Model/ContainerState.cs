/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     ContainerState stores container&#39;s running state. It&#39;s part of ContainerJSONBase and will be returned by the
    ///     \&quot;inspect\&quot; command.
    /// </summary>
    [DataContract]
    public class ContainerState : IEquatable<ContainerState>, IValidatableObject
    {
        /// <summary>
        ///     String representation of the container state. Can be one of \&quot;created\&quot;, \&quot;running\&quot;, \&quot;
        ///     paused\&quot;, \&quot;restarting\&quot;, \&quot;removing\&quot;, \&quot;exited\&quot;, or \&quot;dead\&quot;.
        /// </summary>
        /// <value>
        ///     String representation of the container state. Can be one of \&quot;created\&quot;, \&quot;running\&quot;, \
        ///     &quot;paused\&quot;, \&quot;restarting\&quot;, \&quot;removing\&quot;, \&quot;exited\&quot;, or \&quot;dead\&quot;.
        /// </value>
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum StatusEnum
        {
            /// <summary>
            ///     Enum Created for value: created
            /// </summary>
            [EnumMember(Value = "created")] Created = 1,

            /// <summary>
            ///     Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")] Running = 2,

            /// <summary>
            ///     Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")] Paused = 3,

            /// <summary>
            ///     Enum Restarting for value: restarting
            /// </summary>
            [EnumMember(Value = "restarting")] Restarting = 4,

            /// <summary>
            ///     Enum Removing for value: removing
            /// </summary>
            [EnumMember(Value = "removing")] Removing = 5,

            /// <summary>
            ///     Enum Exited for value: exited
            /// </summary>
            [EnumMember(Value = "exited")] Exited = 6,

            /// <summary>
            ///     Enum Dead for value: dead
            /// </summary>
            [EnumMember(Value = "dead")] Dead = 7
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ContainerState" /> class.
        /// </summary>
        /// <param name="status">
        ///     String representation of the container state. Can be one of \&quot;created\&quot;, \&quot;running\
        ///     &quot;, \&quot;paused\&quot;, \&quot;restarting\&quot;, \&quot;removing\&quot;, \&quot;exited\&quot;, or \&quot;
        ///     dead\&quot;. .
        /// </param>
        /// <param name="running">
        ///     Whether this container is running.  Note that a running container can be _paused_. The &#x60;
        ///     Running&#x60; and &#x60;Paused&#x60; booleans are not mutually exclusive:  When pausing a container (on Linux), the
        ///     freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be
        ///     running. As a result, paused containers are both &#x60;Running&#x60; _and_ &#x60;Paused&#x60;.  Use the &#x60;
        ///     Status&#x60; field instead to determine if a container&#39;s state is \&quot;running\&quot;. .
        /// </param>
        /// <param name="paused">Whether this container is paused..</param>
        /// <param name="restarting">Whether this container is restarting..</param>
        /// <param name="oOMKilled">Whether this container has been killed because it ran out of memory. .</param>
        /// <param name="dead">dead.</param>
        /// <param name="pid">The process ID of this container.</param>
        /// <param name="exitCode">The last exit code of this container.</param>
        /// <param name="error">error.</param>
        /// <param name="startedAt">The time when this container was last started..</param>
        /// <param name="finishedAt">The time when this container last exited..</param>
        /// <param name="health">health.</param>
        public ContainerState(StatusEnum? status = default, bool running = default, bool paused = default,
            bool restarting = default, bool oOMKilled = default, bool dead = default, int pid = default,
            int exitCode = default, string error = default, string startedAt = default, string finishedAt = default,
            Health health = default)
        {
            Status = status;
            Running = running;
            Paused = paused;
            Restarting = restarting;
            OOMKilled = oOMKilled;
            Dead = dead;
            Pid = pid;
            ExitCode = exitCode;
            Error = error;
            StartedAt = startedAt;
            FinishedAt = finishedAt;
            Health = health;
        }

        /// <summary>
        ///     String representation of the container state. Can be one of \&quot;created\&quot;, \&quot;running\&quot;, \&quot;
        ///     paused\&quot;, \&quot;restarting\&quot;, \&quot;removing\&quot;, \&quot;exited\&quot;, or \&quot;dead\&quot;.
        /// </summary>
        /// <value>
        ///     String representation of the container state. Can be one of \&quot;created\&quot;, \&quot;running\&quot;, \
        ///     &quot;paused\&quot;, \&quot;restarting\&quot;, \&quot;removing\&quot;, \&quot;exited\&quot;, or \&quot;dead\&quot;.
        /// </value>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }


        /// <summary>
        ///     Whether this container is running.  Note that a running container can be _paused_. The &#x60;Running&#x60; and
        ///     &#x60;Paused&#x60; booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is
        ///     used to suspend all processes in the container. Freezing the process requires the process to be running. As a
        ///     result, paused containers are both &#x60;Running&#x60; _and_ &#x60;Paused&#x60;.  Use the &#x60;Status&#x60; field
        ///     instead to determine if a container&#39;s state is \&quot;running\&quot;.
        /// </summary>
        /// <value>
        ///     Whether this container is running.  Note that a running container can be _paused_. The &#x60;Running&#x60; and
        ///     &#x60;Paused&#x60; booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is
        ///     used to suspend all processes in the container. Freezing the process requires the process to be running. As a
        ///     result, paused containers are both &#x60;Running&#x60; _and_ &#x60;Paused&#x60;.  Use the &#x60;Status&#x60; field
        ///     instead to determine if a container&#39;s state is \&quot;running\&quot;.
        /// </value>
        [DataMember(Name = "Running", EmitDefaultValue = false)]
        public bool Running { get; set; }

        /// <summary>
        ///     Whether this container is paused.
        /// </summary>
        /// <value>Whether this container is paused.</value>
        [DataMember(Name = "Paused", EmitDefaultValue = false)]
        public bool Paused { get; set; }

        /// <summary>
        ///     Whether this container is restarting.
        /// </summary>
        /// <value>Whether this container is restarting.</value>
        [DataMember(Name = "Restarting", EmitDefaultValue = false)]
        public bool Restarting { get; set; }

        /// <summary>
        ///     Whether this container has been killed because it ran out of memory.
        /// </summary>
        /// <value>Whether this container has been killed because it ran out of memory. </value>
        [DataMember(Name = "OOMKilled", EmitDefaultValue = false)]
        public bool OOMKilled { get; set; }

        /// <summary>
        ///     Gets or Sets Dead
        /// </summary>
        [DataMember(Name = "Dead", EmitDefaultValue = false)]
        public bool Dead { get; set; }

        /// <summary>
        ///     The process ID of this container
        /// </summary>
        /// <value>The process ID of this container</value>
        [DataMember(Name = "Pid", EmitDefaultValue = false)]
        public int Pid { get; set; }

        /// <summary>
        ///     The last exit code of this container
        /// </summary>
        /// <value>The last exit code of this container</value>
        [DataMember(Name = "ExitCode", EmitDefaultValue = false)]
        public int ExitCode { get; set; }

        /// <summary>
        ///     Gets or Sets Error
        /// </summary>
        [DataMember(Name = "Error", EmitDefaultValue = false)]
        public string Error { get; set; }

        /// <summary>
        ///     The time when this container was last started.
        /// </summary>
        /// <value>The time when this container was last started.</value>
        [DataMember(Name = "StartedAt", EmitDefaultValue = false)]
        public string StartedAt { get; set; }

        /// <summary>
        ///     The time when this container last exited.
        /// </summary>
        /// <value>The time when this container last exited.</value>
        [DataMember(Name = "FinishedAt", EmitDefaultValue = false)]
        public string FinishedAt { get; set; }

        /// <summary>
        ///     Gets or Sets Health
        /// </summary>
        [DataMember(Name = "Health", EmitDefaultValue = false)]
        public Health Health { get; set; }

        /// <summary>
        ///     Returns true if ContainerState instances are equal
        /// </summary>
        /// <param name="input">Instance of ContainerState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContainerState input)
        {
            if (input == null)
                return false;

            return
                (
                    Status == input.Status ||
                    Status != null &&
                    Status.Equals(input.Status)
                ) &&
                (
                    Running == input.Running ||
                    Running != null &&
                    Running.Equals(input.Running)
                ) &&
                (
                    Paused == input.Paused ||
                    Paused != null &&
                    Paused.Equals(input.Paused)
                ) &&
                (
                    Restarting == input.Restarting ||
                    Restarting != null &&
                    Restarting.Equals(input.Restarting)
                ) &&
                (
                    OOMKilled == input.OOMKilled ||
                    OOMKilled != null &&
                    OOMKilled.Equals(input.OOMKilled)
                ) &&
                (
                    Dead == input.Dead ||
                    Dead != null &&
                    Dead.Equals(input.Dead)
                ) &&
                (
                    Pid == input.Pid ||
                    Pid != null &&
                    Pid.Equals(input.Pid)
                ) &&
                (
                    ExitCode == input.ExitCode ||
                    ExitCode != null &&
                    ExitCode.Equals(input.ExitCode)
                ) &&
                (
                    Error == input.Error ||
                    Error != null &&
                    Error.Equals(input.Error)
                ) &&
                (
                    StartedAt == input.StartedAt ||
                    StartedAt != null &&
                    StartedAt.Equals(input.StartedAt)
                ) &&
                (
                    FinishedAt == input.FinishedAt ||
                    FinishedAt != null &&
                    FinishedAt.Equals(input.FinishedAt)
                ) &&
                (
                    Health == input.Health ||
                    Health != null &&
                    Health.Equals(input.Health)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContainerState {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  Restarting: ").Append(Restarting).Append("\n");
            sb.Append("  OOMKilled: ").Append(OOMKilled).Append("\n");
            sb.Append("  Dead: ").Append(Dead).Append("\n");
            sb.Append("  Pid: ").Append(Pid).Append("\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ContainerState);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Running != null)
                    hashCode = hashCode * 59 + Running.GetHashCode();
                if (Paused != null)
                    hashCode = hashCode * 59 + Paused.GetHashCode();
                if (Restarting != null)
                    hashCode = hashCode * 59 + Restarting.GetHashCode();
                if (OOMKilled != null)
                    hashCode = hashCode * 59 + OOMKilled.GetHashCode();
                if (Dead != null)
                    hashCode = hashCode * 59 + Dead.GetHashCode();
                if (Pid != null)
                    hashCode = hashCode * 59 + Pid.GetHashCode();
                if (ExitCode != null)
                    hashCode = hashCode * 59 + ExitCode.GetHashCode();
                if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                if (StartedAt != null)
                    hashCode = hashCode * 59 + StartedAt.GetHashCode();
                if (FinishedAt != null)
                    hashCode = hashCode * 59 + FinishedAt.GetHashCode();
                if (Health != null)
                    hashCode = hashCode * 59 + Health.GetHashCode();
                return hashCode;
            }
        }
    }
}