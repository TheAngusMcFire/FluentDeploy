/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     RegistryServiceConfig stores daemon registry services configuration.
    /// </summary>
    [DataContract]
    public class RegistryServiceConfig : IEquatable<RegistryServiceConfig>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="RegistryServiceConfig" /> class.
        /// </summary>
        /// <param name="allowNondistributableArtifactsCIDRs">
        ///     List of IP ranges to which nondistributable artifacts can be pushed,
        ///     using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images)
        ///     contain artifacts whose distribution is restricted by license. When these images are pushed to a registry,
        ///     restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push
        ///     nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR
        ///     syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an
        ///     air-gapped network so hosts on that network can pull the images without connecting to another server.  &gt;
        ///     **Warning**: Nondistributable artifacts typically have restrictions &gt; on how and where they can be distributed
        ///     and shared. Only use this &gt; feature to push artifacts to private registries and ensure that you &gt; are in
        ///     compliance with any terms that cover redistributing &gt; nondistributable artifacts. .
        /// </param>
        /// <param name="allowNondistributableArtifactsHostnames">
        ///     List of registry hostnames to which nondistributable artifacts
        ///     can be pushed, using the format &#x60;&lt;hostname&gt;[:&lt;port&gt;]&#x60; or &#x60;&lt;IP address&gt;[:&lt;port
        ///     &gt;]&#x60;.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by
        ///     license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration
        ///     override this behavior for the specified registries.  This option is useful when pushing images containing
        ///     nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images
        ///     without connecting to another server.  &gt; **Warning**: Nondistributable artifacts typically have restrictions
        ///     &gt; on how and where they can be distributed and shared. Only use this &gt; feature to push artifacts to private
        ///     registries and ensure that you &gt; are in compliance with any terms that cover redistributing &gt;
        ///     nondistributable artifacts. .
        /// </param>
        /// <param name="insecureRegistryCIDRs">
        ///     List of IP ranges of insecure registries, using the CIDR syntax ([RFC
        ///     4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS
        ///     with certificates from unknown CAs) communication.  By default, local registries (&#x60;127.0.0.0/8&#x60;) are
        ///     configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if
        ///     the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with
        ///     registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be
        ///     marked insecure by hostname. Those registries are listed under &#x60;IndexConfigs&#x60; and have their &#x60;Secure
        ///     &#x60; field set to &#x60;false&#x60;.  &gt; **Warning**: Using this option can be useful when running a local &gt;
        ///     registry, but introduces security vulnerabilities. This option &gt; should therefore ONLY be used for testing
        ///     purposes. For increased &gt; security, users should add their CA to their system&#39;s list of trusted &gt; CAs
        ///     instead of enabling this option. .
        /// </param>
        /// <param name="indexConfigs">indexConfigs.</param>
        /// <param name="mirrors">List of registry URLs that act as a mirror for the official (&#x60;docker.io&#x60;) registry. .</param>
        public RegistryServiceConfig(List<string> allowNondistributableArtifactsCIDRs = default,
            List<string> allowNondistributableArtifactsHostnames = default,
            List<string> insecureRegistryCIDRs = default, Dictionary<string, IndexInfo> indexConfigs = default,
            List<string> mirrors = default)
        {
            AllowNondistributableArtifactsCIDRs = allowNondistributableArtifactsCIDRs;
            AllowNondistributableArtifactsHostnames = allowNondistributableArtifactsHostnames;
            InsecureRegistryCIDRs = insecureRegistryCIDRs;
            IndexConfigs = indexConfigs;
            Mirrors = mirrors;
        }

        /// <summary>
        ///     List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC
        ///     4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose
        ///     distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not
        ///     included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to
        ///     all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful
        ///     when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that
        ///     network can pull the images without connecting to another server.  &gt; **Warning**: Nondistributable artifacts
        ///     typically have restrictions &gt; on how and where they can be distributed and shared. Only use this &gt; feature to
        ///     push artifacts to private registries and ensure that you &gt; are in compliance with any terms that cover
        ///     redistributing &gt; nondistributable artifacts.
        /// </summary>
        /// <value>
        ///     List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC
        ///     4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose
        ///     distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not
        ///     included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to
        ///     all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful
        ///     when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that
        ///     network can pull the images without connecting to another server.  &gt; **Warning**: Nondistributable artifacts
        ///     typically have restrictions &gt; on how and where they can be distributed and shared. Only use this &gt; feature to
        ///     push artifacts to private registries and ensure that you &gt; are in compliance with any terms that cover
        ///     redistributing &gt; nondistributable artifacts.
        /// </value>
        [DataMember(Name = "AllowNondistributableArtifactsCIDRs", EmitDefaultValue = false)]
        public List<string> AllowNondistributableArtifactsCIDRs { get; set; }

        /// <summary>
        ///     List of registry hostnames to which nondistributable artifacts can be pushed, using the format &#x60;&lt;hostname
        ///     &gt;[:&lt;port&gt;]&#x60; or &#x60;&lt;IP address&gt;[:&lt;port&gt;]&#x60;.  Some images (for example, Windows base
        ///     images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry,
        ///     restricted artifacts are not included.  This configuration override this behavior for the specified registries.
        ///     This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped
        ///     network so hosts on that network can pull the images without connecting to another server.  &gt; **Warning**:
        ///     Nondistributable artifacts typically have restrictions &gt; on how and where they can be distributed and shared.
        ///     Only use this &gt; feature to push artifacts to private registries and ensure that you &gt; are in compliance with
        ///     any terms that cover redistributing &gt; nondistributable artifacts.
        /// </summary>
        /// <value>
        ///     List of registry hostnames to which nondistributable artifacts can be pushed, using the format &#x60;&lt;
        ///     hostname&gt;[:&lt;port&gt;]&#x60; or &#x60;&lt;IP address&gt;[:&lt;port&gt;]&#x60;.  Some images (for example,
        ///     Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to
        ///     a registry, restricted artifacts are not included.  This configuration override this behavior for the specified
        ///     registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an
        ///     air-gapped network so hosts on that network can pull the images without connecting to another server.  &gt;
        ///     **Warning**: Nondistributable artifacts typically have restrictions &gt; on how and where they can be distributed
        ///     and shared. Only use this &gt; feature to push artifacts to private registries and ensure that you &gt; are in
        ///     compliance with any terms that cover redistributing &gt; nondistributable artifacts.
        /// </value>
        [DataMember(Name = "AllowNondistributableArtifactsHostnames", EmitDefaultValue = false)]
        public List<string> AllowNondistributableArtifactsHostnames { get; set; }

        /// <summary>
        ///     List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)).
        ///     Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs)
        ///     communication.  By default, local registries (&#x60;127.0.0.0/8&#x60;) are configured as insecure. All other
        ///     registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry
        ///     is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP
        ///     address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname.
        ///     Those registries are listed under &#x60;IndexConfigs&#x60; and have their &#x60;Secure&#x60; field set to &#x60;
        ///     false&#x60;.  &gt; **Warning**: Using this option can be useful when running a local &gt; registry, but introduces
        ///     security vulnerabilities. This option &gt; should therefore ONLY be used for testing purposes. For increased &gt;
        ///     security, users should add their CA to their system&#39;s list of trusted &gt; CAs instead of enabling this option.
        /// </summary>
        /// <value>
        ///     List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)).
        ///     Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs)
        ///     communication.  By default, local registries (&#x60;127.0.0.0/8&#x60;) are configured as insecure. All other
        ///     registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry
        ///     is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP
        ///     address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname.
        ///     Those registries are listed under &#x60;IndexConfigs&#x60; and have their &#x60;Secure&#x60; field set to &#x60;
        ///     false&#x60;.  &gt; **Warning**: Using this option can be useful when running a local &gt; registry, but introduces
        ///     security vulnerabilities. This option &gt; should therefore ONLY be used for testing purposes. For increased &gt;
        ///     security, users should add their CA to their system&#39;s list of trusted &gt; CAs instead of enabling this option.
        /// </value>
        [DataMember(Name = "InsecureRegistryCIDRs", EmitDefaultValue = false)]
        public List<string> InsecureRegistryCIDRs { get; set; }

        /// <summary>
        ///     Gets or Sets IndexConfigs
        /// </summary>
        [DataMember(Name = "IndexConfigs", EmitDefaultValue = false)]
        public Dictionary<string, IndexInfo> IndexConfigs { get; set; }

        /// <summary>
        ///     List of registry URLs that act as a mirror for the official (&#x60;docker.io&#x60;) registry.
        /// </summary>
        /// <value>List of registry URLs that act as a mirror for the official (&#x60;docker.io&#x60;) registry. </value>
        [DataMember(Name = "Mirrors", EmitDefaultValue = false)]
        public List<string> Mirrors { get; set; }

        /// <summary>
        ///     Returns true if RegistryServiceConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistryServiceConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistryServiceConfig input)
        {
            if (input == null)
                return false;

            return
                (
                    AllowNondistributableArtifactsCIDRs == input.AllowNondistributableArtifactsCIDRs ||
                    AllowNondistributableArtifactsCIDRs != null &&
                    input.AllowNondistributableArtifactsCIDRs != null &&
                    AllowNondistributableArtifactsCIDRs.SequenceEqual(input.AllowNondistributableArtifactsCIDRs)
                ) &&
                (
                    AllowNondistributableArtifactsHostnames == input.AllowNondistributableArtifactsHostnames ||
                    AllowNondistributableArtifactsHostnames != null &&
                    input.AllowNondistributableArtifactsHostnames != null &&
                    AllowNondistributableArtifactsHostnames.SequenceEqual(input.AllowNondistributableArtifactsHostnames)
                ) &&
                (
                    InsecureRegistryCIDRs == input.InsecureRegistryCIDRs ||
                    InsecureRegistryCIDRs != null &&
                    input.InsecureRegistryCIDRs != null &&
                    InsecureRegistryCIDRs.SequenceEqual(input.InsecureRegistryCIDRs)
                ) &&
                (
                    IndexConfigs == input.IndexConfigs ||
                    IndexConfigs != null &&
                    input.IndexConfigs != null &&
                    IndexConfigs.SequenceEqual(input.IndexConfigs)
                ) &&
                (
                    Mirrors == input.Mirrors ||
                    Mirrors != null &&
                    input.Mirrors != null &&
                    Mirrors.SequenceEqual(input.Mirrors)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistryServiceConfig {\n");
            sb.Append("  AllowNondistributableArtifactsCIDRs: ").Append(AllowNondistributableArtifactsCIDRs)
                .Append("\n");
            sb.Append("  AllowNondistributableArtifactsHostnames: ").Append(AllowNondistributableArtifactsHostnames)
                .Append("\n");
            sb.Append("  InsecureRegistryCIDRs: ").Append(InsecureRegistryCIDRs).Append("\n");
            sb.Append("  IndexConfigs: ").Append(IndexConfigs).Append("\n");
            sb.Append("  Mirrors: ").Append(Mirrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RegistryServiceConfig);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (AllowNondistributableArtifactsCIDRs != null)
                    hashCode = hashCode * 59 + AllowNondistributableArtifactsCIDRs.GetHashCode();
                if (AllowNondistributableArtifactsHostnames != null)
                    hashCode = hashCode * 59 + AllowNondistributableArtifactsHostnames.GetHashCode();
                if (InsecureRegistryCIDRs != null)
                    hashCode = hashCode * 59 + InsecureRegistryCIDRs.GetHashCode();
                if (IndexConfigs != null)
                    hashCode = hashCode * 59 + IndexConfigs.GetHashCode();
                if (Mirrors != null)
                    hashCode = hashCode * 59 + Mirrors.GetHashCode();
                return hashCode;
            }
        }
    }
}