/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     HostConfigAllOf
    /// </summary>
    [DataContract]
    public class HostConfigAllOf : IEquatable<HostConfigAllOf>, IValidatableObject
    {
        /// <summary>
        ///     Isolation technology of the container. (Windows only)
        /// </summary>
        /// <value>Isolation technology of the container. (Windows only) </value>
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum IsolationEnum
        {
            /// <summary>
            ///     Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")] Default = 1,

            /// <summary>
            ///     Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")] Process = 2,

            /// <summary>
            ///     Enum Hyperv for value: hyperv
            /// </summary>
            [EnumMember(Value = "hyperv")] Hyperv = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="HostConfigAllOf" /> class.
        /// </summary>
        /// <param name="binds">
        ///     A list of volume bindings for this container. Each volume binding is a string in one of these
        ///     forms:  - &#x60;host-src:container-dest[:options]&#x60; to bind-mount a host path   into the container. Both &#x60;
        ///     host-src&#x60;, and &#x60;container-dest&#x60; must   be an _absolute_ path. - &#x60;
        ///     volume-name:container-dest[:options]&#x60; to bind-mount a volume   managed by a volume driver into the container.
        ///     &#x60;container-dest&#x60;   must be an _absolute_ path.  &#x60;options&#x60; is an optional, comma-delimited list
        ///     of:  - &#x60;nocopy&#x60; disables automatic copying of data from the container   path to the volume. The &#x60;
        ///     nocopy&#x60; flag only applies to named volumes. - &#x60;[ro|rw]&#x60; mounts a volume read-only or read-write,
        ///     respectively.   If omitted or set to &#x60;rw&#x60;, volumes are mounted read-write. - &#x60;[z|Z]&#x60; applies
        ///     SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - &#x60;z&#x60;: a
        ///     _shared_ content label is applied to the content. This       label indicates that multiple containers can share the
        ///     volume       content, for both reading and writing.     - &#x60;Z&#x60;: a _private unshared_ label is applied to
        ///     the content.       This label indicates that only the current container can use       a private volume. Labeling
        ///     systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a
        ///     container. Without a label, the security system can       prevent a container&#39;s processes from using the
        ///     content. By       default, the labels set by the host operating system are not       modified. - &#x60;
        ///     [[r]shared|[r]slave|[r]private]&#x60; specifies mount   [propagation
        ///     behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to
        ///     bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point
        ///     (the location where the source directory is mounted in the   host operating system) to have the correct propagation
        ///     properties.   For shared volumes, the source mount point must be set to &#x60;shared&#x60;.   For slave volumes,
        ///     the mount must be set to either &#x60;shared&#x60; or   &#x60;slave&#x60;. .
        /// </param>
        /// <param name="containerIDFile">Path to a file where the container ID is written.</param>
        /// <param name="logConfig">logConfig.</param>
        /// <param name="networkMode">
        ///     Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;,
        ///     &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom
        ///     network&#39;s name to which this container should connect to. .
        /// </param>
        /// <param name="portBindings">
        ///     PortMap describes the mapping of container ports to host ports, using the container&#39;s
        ///     port-number and protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp
        ///     &#x60;.  If a container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping
        ///     table. .
        /// </param>
        /// <param name="restartPolicy">restartPolicy.</param>
        /// <param name="autoRemove">
        ///     Automatically remove the container when the container&#39;s process exits. This has no effect
        ///     if &#x60;RestartPolicy&#x60; is set. .
        /// </param>
        /// <param name="volumeDriver">Driver that this container uses to mount volumes..</param>
        /// <param name="volumesFrom">
        ///     A list of volumes to inherit from another container, specified in the form &#x60;&lt;
        ///     container name&gt;[:&lt;ro|rw&gt;]&#x60;. .
        /// </param>
        /// <param name="mounts">Specification for mounts to be added to the container. .</param>
        /// <param name="capabilities">
        ///     A list of kernel capabilities to be available for container (this overrides the default
        ///     set).  Conflicts with options &#39;CapAdd&#39; and &#39;CapDrop&#39;\&quot; .
        /// </param>
        /// <param name="capAdd">
        ///     A list of kernel capabilities to add to the container. Conflicts with option &#39;Capabilities
        ///     &#39;. .
        /// </param>
        /// <param name="capDrop">
        ///     A list of kernel capabilities to drop from the container. Conflicts with option &#39;Capabilities
        ///     &#39;. .
        /// </param>
        /// <param name="dns">A list of DNS servers for the container to use..</param>
        /// <param name="dnsOptions">A list of DNS options..</param>
        /// <param name="dnsSearch">A list of DNS search domains..</param>
        /// <param name="extraHosts">
        ///     A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file.
        ///     Specified in the form &#x60;[\&quot;hostname:IP\&quot;]&#x60;. .
        /// </param>
        /// <param name="groupAdd">A list of additional groups that the container process will run as. .</param>
        /// <param name="ipcMode">
        ///     IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own
        ///     private IPC namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace -
        ///     &#x60;\&quot;shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other
        ///     containers - &#x60;\&quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC
        ///     namespace - &#x60;\&quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon
        ///     default is used, which can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;,
        ///     depending on daemon version and configuration. .
        /// </param>
        /// <param name="cgroup">Cgroup to use for the container..</param>
        /// <param name="links">A list of links for the container in the form &#x60;container_name:alias&#x60;. .</param>
        /// <param name="oomScoreAdj">
        ///     An integer value containing the score given to the container in order to tune OOM killer
        ///     preferences. .
        /// </param>
        /// <param name="pidMode">
        ///     Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;
        ///     container:&lt;name|id&gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;
        ///     &#x60;: use the host&#39;s PID namespace inside the container .
        /// </param>
        /// <param name="privileged">Gives the container full access to the host..</param>
        /// <param name="publishAllPorts">
        ///     Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are
        ///     de-allocated when the container stops and allocated when the container starts. The allocated port might be changed
        ///     when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For
        ///     example, on Linux the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;. .
        /// </param>
        /// <param name="readonlyRootfs">Mount the container&#39;s root filesystem as read only..</param>
        /// <param name="securityOpt">A list of string values to customize labels for MLS systems, such as SELinux..</param>
        /// <param name="storageOpt">
        ///     Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\
        ///     &quot;}&#x60;. .
        /// </param>
        /// <param name="tmpfs">
        ///     A map of container directories which should be replaced by tmpfs mounts, and their corresponding
        ///     mount options. For example:  &#x60;&#x60;&#x60; { \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\
        ///     &quot; } &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="uTSMode">UTS namespace to use for the container..</param>
        /// <param name="usernsMode">
        ///     Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
        ///     .
        /// </param>
        /// <param name="shmSize">Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB. .</param>
        /// <param name="sysctls">
        ///     A list of kernel parameters (sysctls) to set in the container. For example:  &#x60;&#x60;&#x60;
        ///     {\&quot;net.ipv4.ip_forward\&quot;: \&quot;1\&quot;} &#x60;&#x60;&#x60; .
        /// </param>
        /// <param name="runtime">Runtime to use with this container..</param>
        /// <param name="consoleSize">Initial console size, as an &#x60;[height, width]&#x60; array. (Windows only) .</param>
        /// <param name="isolation">Isolation technology of the container. (Windows only) .</param>
        /// <param name="maskedPaths">
        ///     The list of paths to be masked inside the container (this overrides the default set of
        ///     paths). .
        /// </param>
        /// <param name="readonlyPaths">
        ///     The list of paths to be set as read-only inside the container (this overrides the default
        ///     set of paths). .
        /// </param>
        public HostConfigAllOf(List<string> binds = default, string containerIDFile = default,
            HostConfigAllOfLogConfig logConfig = default, string networkMode = default,
            Dictionary<string, List<PortBinding>> portBindings = default, RestartPolicy restartPolicy = default,
            bool autoRemove = default, string volumeDriver = default, List<string> volumesFrom = default,
            List<Mount> mounts = default, List<string> capabilities = default, List<string> capAdd = default,
            List<string> capDrop = default, List<string> dns = default, List<string> dnsOptions = default,
            List<string> dnsSearch = default, List<string> extraHosts = default, List<string> groupAdd = default,
            string ipcMode = default, string cgroup = default, List<string> links = default, int oomScoreAdj = default,
            string pidMode = default, bool privileged = default, bool publishAllPorts = default,
            bool readonlyRootfs = default, List<string> securityOpt = default,
            Dictionary<string, string> storageOpt = default, Dictionary<string, string> tmpfs = default,
            string uTSMode = default, string usernsMode = default, int shmSize = default,
            Dictionary<string, string> sysctls = default, string runtime = default, List<int> consoleSize = default,
            IsolationEnum? isolation = default, List<string> maskedPaths = default,
            List<string> readonlyPaths = default)
        {
            Binds = binds;
            ContainerIDFile = containerIDFile;
            LogConfig = logConfig;
            NetworkMode = networkMode;
            PortBindings = portBindings;
            RestartPolicy = restartPolicy;
            AutoRemove = autoRemove;
            VolumeDriver = volumeDriver;
            VolumesFrom = volumesFrom;
            Mounts = mounts;
            Capabilities = capabilities;
            CapAdd = capAdd;
            CapDrop = capDrop;
            Dns = dns;
            DnsOptions = dnsOptions;
            DnsSearch = dnsSearch;
            ExtraHosts = extraHosts;
            GroupAdd = groupAdd;
            IpcMode = ipcMode;
            Cgroup = cgroup;
            Links = links;
            OomScoreAdj = oomScoreAdj;
            PidMode = pidMode;
            Privileged = privileged;
            PublishAllPorts = publishAllPorts;
            ReadonlyRootfs = readonlyRootfs;
            SecurityOpt = securityOpt;
            StorageOpt = storageOpt;
            Tmpfs = tmpfs;
            UTSMode = uTSMode;
            UsernsMode = usernsMode;
            ShmSize = shmSize;
            Sysctls = sysctls;
            Runtime = runtime;
            ConsoleSize = consoleSize;
            Isolation = isolation;
            MaskedPaths = maskedPaths;
            ReadonlyPaths = readonlyPaths;
        }

        /// <summary>
        ///     Isolation technology of the container. (Windows only)
        /// </summary>
        /// <value>Isolation technology of the container. (Windows only) </value>
        [DataMember(Name = "Isolation", EmitDefaultValue = false)]
        public IsolationEnum? Isolation { get; set; }

        /// <summary>
        ///     A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;
        ///     host-src:container-dest[:options]&#x60; to bind-mount a host path   into the container. Both &#x60;host-src&#x60;,
        ///     and &#x60;container-dest&#x60; must   be an _absolute_ path. - &#x60;volume-name:container-dest[:options]&#x60; to
        ///     bind-mount a volume   managed by a volume driver into the container. &#x60;container-dest&#x60;   must be an
        ///     _absolute_ path.  &#x60;options&#x60; is an optional, comma-delimited list of:  - &#x60;nocopy&#x60; disables
        ///     automatic copying of data from the container   path to the volume. The &#x60;nocopy&#x60; flag only applies to
        ///     named volumes. - &#x60;[ro|rw]&#x60; mounts a volume read-only or read-write, respectively.   If omitted or set to
        ///     &#x60;rw&#x60;, volumes are mounted read-write. - &#x60;[z|Z]&#x60; applies SELinux labels to allow or deny
        ///     multiple containers   to read and write to the same volume.     - &#x60;z&#x60;: a _shared_ content label is
        ///     applied to the content. This       label indicates that multiple containers can share the volume       content, for
        ///     both reading and writing.     - &#x60;Z&#x60;: a _private unshared_ label is applied to the content.       This
        ///     label indicates that only the current container can use       a private volume. Labeling systems such as SELinux
        ///     require       proper labels to be placed on volume content that is mounted       into a container. Without a label,
        ///     the security system can       prevent a container&#39;s processes from using the content. By       default, the
        ///     labels set by the host operating system are not       modified. - &#x60;[[r]shared|[r]slave|[r]private]&#x60;
        ///     specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
        ///     This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the
        ///     source mount   point (the location where the source directory is mounted in the   host operating system) to have
        ///     the correct propagation properties.   For shared volumes, the source mount point must be set to &#x60;shared&#x60;.
        ///     For slave volumes, the mount must be set to either &#x60;shared&#x60; or   &#x60;slave&#x60;.
        /// </summary>
        /// <value>
        ///     A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - &#x60;
        ///     host-src:container-dest[:options]&#x60; to bind-mount a host path   into the container. Both &#x60;host-src&#x60;,
        ///     and &#x60;container-dest&#x60; must   be an _absolute_ path. - &#x60;volume-name:container-dest[:options]&#x60; to
        ///     bind-mount a volume   managed by a volume driver into the container. &#x60;container-dest&#x60;   must be an
        ///     _absolute_ path.  &#x60;options&#x60; is an optional, comma-delimited list of:  - &#x60;nocopy&#x60; disables
        ///     automatic copying of data from the container   path to the volume. The &#x60;nocopy&#x60; flag only applies to
        ///     named volumes. - &#x60;[ro|rw]&#x60; mounts a volume read-only or read-write, respectively.   If omitted or set to
        ///     &#x60;rw&#x60;, volumes are mounted read-write. - &#x60;[z|Z]&#x60; applies SELinux labels to allow or deny
        ///     multiple containers   to read and write to the same volume.     - &#x60;z&#x60;: a _shared_ content label is
        ///     applied to the content. This       label indicates that multiple containers can share the volume       content, for
        ///     both reading and writing.     - &#x60;Z&#x60;: a _private unshared_ label is applied to the content.       This
        ///     label indicates that only the current container can use       a private volume. Labeling systems such as SELinux
        ///     require       proper labels to be placed on volume content that is mounted       into a container. Without a label,
        ///     the security system can       prevent a container&#39;s processes from using the content. By       default, the
        ///     labels set by the host operating system are not       modified. - &#x60;[[r]shared|[r]slave|[r]private]&#x60;
        ///     specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
        ///     This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the
        ///     source mount   point (the location where the source directory is mounted in the   host operating system) to have
        ///     the correct propagation properties.   For shared volumes, the source mount point must be set to &#x60;shared&#x60;.
        ///     For slave volumes, the mount must be set to either &#x60;shared&#x60; or   &#x60;slave&#x60;.
        /// </value>
        [DataMember(Name = "Binds", EmitDefaultValue = false)]
        public List<string> Binds { get; set; }

        /// <summary>
        ///     Path to a file where the container ID is written
        /// </summary>
        /// <value>Path to a file where the container ID is written</value>
        [DataMember(Name = "ContainerIDFile", EmitDefaultValue = false)]
        public string ContainerIDFile { get; set; }

        /// <summary>
        ///     Gets or Sets LogConfig
        /// </summary>
        [DataMember(Name = "LogConfig", EmitDefaultValue = false)]
        public HostConfigAllOfLogConfig LogConfig { get; set; }

        /// <summary>
        ///     Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;
        ///     none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name to
        ///     which this container should connect to.
        /// </summary>
        /// <value>
        ///     Network mode to use for this container. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;,
        ///     &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s
        ///     name to which this container should connect to.
        /// </value>
        [DataMember(Name = "NetworkMode", EmitDefaultValue = false)]
        public string NetworkMode { get; set; }

        /// <summary>
        ///     PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and protocol
        ///     as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a container
        ///     &#39;s port is mapped for multiple protocols, separate entries are added to the mapping table.
        /// </summary>
        /// <value>
        ///     PortMap describes the mapping of container ports to host ports, using the container&#39;s port-number and
        ///     protocol as key in the format &#x60;&lt;port&gt;/&lt;protocol&gt;&#x60;, for example, &#x60;80/udp&#x60;.  If a
        ///     container&#39;s port is mapped for multiple protocols, separate entries are added to the mapping table.
        /// </value>
        [DataMember(Name = "PortBindings", EmitDefaultValue = false)]
        public Dictionary<string, List<PortBinding>> PortBindings { get; set; }

        /// <summary>
        ///     Gets or Sets RestartPolicy
        /// </summary>
        [DataMember(Name = "RestartPolicy", EmitDefaultValue = false)]
        public RestartPolicy RestartPolicy { get; set; }

        /// <summary>
        ///     Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;
        ///     RestartPolicy&#x60; is set.
        /// </summary>
        /// <value>
        ///     Automatically remove the container when the container&#39;s process exits. This has no effect if &#x60;
        ///     RestartPolicy&#x60; is set.
        /// </value>
        [DataMember(Name = "AutoRemove", EmitDefaultValue = false)]
        public bool AutoRemove { get; set; }

        /// <summary>
        ///     Driver that this container uses to mount volumes.
        /// </summary>
        /// <value>Driver that this container uses to mount volumes.</value>
        [DataMember(Name = "VolumeDriver", EmitDefaultValue = false)]
        public string VolumeDriver { get; set; }

        /// <summary>
        ///     A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;ro|rw
        ///     &gt;]&#x60;.
        /// </summary>
        /// <value>
        ///     A list of volumes to inherit from another container, specified in the form &#x60;&lt;container name&gt;[:&lt;
        ///     ro|rw&gt;]&#x60;.
        /// </value>
        [DataMember(Name = "VolumesFrom", EmitDefaultValue = false)]
        public List<string> VolumesFrom { get; set; }

        /// <summary>
        ///     Specification for mounts to be added to the container.
        /// </summary>
        /// <value>Specification for mounts to be added to the container. </value>
        [DataMember(Name = "Mounts", EmitDefaultValue = false)]
        public List<Mount> Mounts { get; set; }

        /// <summary>
        ///     A list of kernel capabilities to be available for container (this overrides the default set).  Conflicts with
        ///     options &#39;CapAdd&#39; and &#39;CapDrop&#39;\&quot;
        /// </summary>
        /// <value>
        ///     A list of kernel capabilities to be available for container (this overrides the default set).  Conflicts with
        ///     options &#39;CapAdd&#39; and &#39;CapDrop&#39;\&quot;
        /// </value>
        [DataMember(Name = "Capabilities", EmitDefaultValue = false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        ///     A list of kernel capabilities to add to the container. Conflicts with option &#39;Capabilities&#39;.
        /// </summary>
        /// <value>A list of kernel capabilities to add to the container. Conflicts with option &#39;Capabilities&#39;. </value>
        [DataMember(Name = "CapAdd", EmitDefaultValue = false)]
        public List<string> CapAdd { get; set; }

        /// <summary>
        ///     A list of kernel capabilities to drop from the container. Conflicts with option &#39;Capabilities&#39;.
        /// </summary>
        /// <value>A list of kernel capabilities to drop from the container. Conflicts with option &#39;Capabilities&#39;. </value>
        [DataMember(Name = "CapDrop", EmitDefaultValue = false)]
        public List<string> CapDrop { get; set; }

        /// <summary>
        ///     A list of DNS servers for the container to use.
        /// </summary>
        /// <value>A list of DNS servers for the container to use.</value>
        [DataMember(Name = "Dns", EmitDefaultValue = false)]
        public List<string> Dns { get; set; }

        /// <summary>
        ///     A list of DNS options.
        /// </summary>
        /// <value>A list of DNS options.</value>
        [DataMember(Name = "DnsOptions", EmitDefaultValue = false)]
        public List<string> DnsOptions { get; set; }

        /// <summary>
        ///     A list of DNS search domains.
        /// </summary>
        /// <value>A list of DNS search domains.</value>
        [DataMember(Name = "DnsSearch", EmitDefaultValue = false)]
        public List<string> DnsSearch { get; set; }

        /// <summary>
        ///     A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form
        ///     &#x60;[\&quot;hostname:IP\&quot;]&#x60;.
        /// </summary>
        /// <value>
        ///     A list of hostnames/IP mappings to add to the container&#39;s &#x60;/etc/hosts&#x60; file. Specified in the form
        ///     &#x60;[\&quot;hostname:IP\&quot;]&#x60;.
        /// </value>
        [DataMember(Name = "ExtraHosts", EmitDefaultValue = false)]
        public List<string> ExtraHosts { get; set; }

        /// <summary>
        ///     A list of additional groups that the container process will run as.
        /// </summary>
        /// <value>A list of additional groups that the container process will run as. </value>
        [DataMember(Name = "GroupAdd", EmitDefaultValue = false)]
        public List<string> GroupAdd { get; set; }

        /// <summary>
        ///     IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC
        ///     namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;
        ///     shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\
        ///     &quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\
        ///     &quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which
        ///     can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version
        ///     and configuration.
        /// </summary>
        /// <value>
        ///     IPC sharing mode for the container. Possible values are:  - &#x60;\&quot;none\&quot;&#x60;: own private IPC
        ///     namespace, with /dev/shm not mounted - &#x60;\&quot;private\&quot;&#x60;: own private IPC namespace - &#x60;\&quot;
        ///     shareable\&quot;&#x60;: own private IPC namespace, with a possibility to share it with other containers - &#x60;\
        ///     &quot;container:&lt;name|id&gt;\&quot;&#x60;: join another (shareable) container&#39;s IPC namespace - &#x60;\
        ///     &quot;host\&quot;&#x60;: use the host system&#39;s IPC namespace  If not specified, daemon default is used, which
        ///     can either be &#x60;\&quot;private\&quot;&#x60; or &#x60;\&quot;shareable\&quot;&#x60;, depending on daemon version
        ///     and configuration.
        /// </value>
        [DataMember(Name = "IpcMode", EmitDefaultValue = false)]
        public string IpcMode { get; set; }

        /// <summary>
        ///     Cgroup to use for the container.
        /// </summary>
        /// <value>Cgroup to use for the container.</value>
        [DataMember(Name = "Cgroup", EmitDefaultValue = false)]
        public string Cgroup { get; set; }

        /// <summary>
        ///     A list of links for the container in the form &#x60;container_name:alias&#x60;.
        /// </summary>
        /// <value>A list of links for the container in the form &#x60;container_name:alias&#x60;. </value>
        [DataMember(Name = "Links", EmitDefaultValue = false)]
        public List<string> Links { get; set; }

        /// <summary>
        ///     An integer value containing the score given to the container in order to tune OOM killer preferences.
        /// </summary>
        /// <value>An integer value containing the score given to the container in order to tune OOM killer preferences. </value>
        [DataMember(Name = "OomScoreAdj", EmitDefaultValue = false)]
        public int OomScoreAdj { get; set; }

        /// <summary>
        ///     Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id&gt;
        ///     \&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s PID
        ///     namespace inside the container
        /// </summary>
        /// <value>
        ///     Set the PID (Process) Namespace mode for the container. It can be either:  - &#x60;\&quot;container:&lt;name|id
        ///     &gt;\&quot;&#x60;: joins another container&#39;s PID namespace - &#x60;\&quot;host\&quot;&#x60;: use the host&#39;s
        ///     PID namespace inside the container
        /// </value>
        [DataMember(Name = "PidMode", EmitDefaultValue = false)]
        public string PidMode { get; set; }

        /// <summary>
        ///     Gives the container full access to the host.
        /// </summary>
        /// <value>Gives the container full access to the host.</value>
        [DataMember(Name = "Privileged", EmitDefaultValue = false)]
        public bool Privileged { get; set; }

        /// <summary>
        ///     Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the
        ///     container stops and allocated when the container starts. The allocated port might be changed when restarting the
        ///     container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux
        ///     the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;.
        /// </summary>
        /// <value>
        ///     Allocates an ephemeral host port for all of a container&#39;s exposed ports.  Ports are de-allocated when the
        ///     container stops and allocated when the container starts. The allocated port might be changed when restarting the
        ///     container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux
        ///     the range is defined by &#x60;/proc/sys/net/ipv4/ip_local_port_range&#x60;.
        /// </value>
        [DataMember(Name = "PublishAllPorts", EmitDefaultValue = false)]
        public bool PublishAllPorts { get; set; }

        /// <summary>
        ///     Mount the container&#39;s root filesystem as read only.
        /// </summary>
        /// <value>Mount the container&#39;s root filesystem as read only.</value>
        [DataMember(Name = "ReadonlyRootfs", EmitDefaultValue = false)]
        public bool ReadonlyRootfs { get; set; }

        /// <summary>
        ///     A list of string values to customize labels for MLS systems, such as SELinux.
        /// </summary>
        /// <value>A list of string values to customize labels for MLS systems, such as SELinux.</value>
        [DataMember(Name = "SecurityOpt", EmitDefaultValue = false)]
        public List<string> SecurityOpt { get; set; }

        /// <summary>
        ///     Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;.
        /// </summary>
        /// <value>Storage driver options for this container, in the form &#x60;{\&quot;size\&quot;: \&quot;120G\&quot;}&#x60;. </value>
        [DataMember(Name = "StorageOpt", EmitDefaultValue = false)]
        public Dictionary<string, string> StorageOpt { get; set; }

        /// <summary>
        ///     A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For
        ///     example:  &#x60;&#x60;&#x60; { \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; } &#x60;&#x60;
        ///     &#x60;
        /// </summary>
        /// <value>
        ///     A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options.
        ///     For example:  &#x60;&#x60;&#x60; { \&quot;/run\&quot;: \&quot;rw,noexec,nosuid,size&#x3D;65536k\&quot; } &#x60;
        ///     &#x60;&#x60;
        /// </value>
        [DataMember(Name = "Tmpfs", EmitDefaultValue = false)]
        public Dictionary<string, string> Tmpfs { get; set; }

        /// <summary>
        ///     UTS namespace to use for the container.
        /// </summary>
        /// <value>UTS namespace to use for the container.</value>
        [DataMember(Name = "UTSMode", EmitDefaultValue = false)]
        public string UTSMode { get; set; }

        /// <summary>
        ///     Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
        /// </summary>
        /// <value>Sets the usernamespace mode for the container when usernamespace remapping option is enabled. </value>
        [DataMember(Name = "UsernsMode", EmitDefaultValue = false)]
        public string UsernsMode { get; set; }

        /// <summary>
        ///     Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB.
        /// </summary>
        /// <value>Size of &#x60;/dev/shm&#x60; in bytes. If omitted, the system uses 64MB. </value>
        [DataMember(Name = "ShmSize", EmitDefaultValue = false)]
        public int ShmSize { get; set; }

        /// <summary>
        ///     A list of kernel parameters (sysctls) to set in the container. For example:  &#x60;&#x60;&#x60; {\&quot;
        ///     net.ipv4.ip_forward\&quot;: \&quot;1\&quot;} &#x60;&#x60;&#x60;
        /// </summary>
        /// <value>
        ///     A list of kernel parameters (sysctls) to set in the container. For example:  &#x60;&#x60;&#x60; {\&quot;
        ///     net.ipv4.ip_forward\&quot;: \&quot;1\&quot;} &#x60;&#x60;&#x60;
        /// </value>
        [DataMember(Name = "Sysctls", EmitDefaultValue = false)]
        public Dictionary<string, string> Sysctls { get; set; }

        /// <summary>
        ///     Runtime to use with this container.
        /// </summary>
        /// <value>Runtime to use with this container.</value>
        [DataMember(Name = "Runtime", EmitDefaultValue = false)]
        public string Runtime { get; set; }

        /// <summary>
        ///     Initial console size, as an &#x60;[height, width]&#x60; array. (Windows only)
        /// </summary>
        /// <value>Initial console size, as an &#x60;[height, width]&#x60; array. (Windows only) </value>
        [DataMember(Name = "ConsoleSize", EmitDefaultValue = false)]
        public List<int> ConsoleSize { get; set; }


        /// <summary>
        ///     The list of paths to be masked inside the container (this overrides the default set of paths).
        /// </summary>
        /// <value>The list of paths to be masked inside the container (this overrides the default set of paths). </value>
        [DataMember(Name = "MaskedPaths", EmitDefaultValue = false)]
        public List<string> MaskedPaths { get; set; }

        /// <summary>
        ///     The list of paths to be set as read-only inside the container (this overrides the default set of paths).
        /// </summary>
        /// <value>The list of paths to be set as read-only inside the container (this overrides the default set of paths). </value>
        [DataMember(Name = "ReadonlyPaths", EmitDefaultValue = false)]
        public List<string> ReadonlyPaths { get; set; }

        /// <summary>
        ///     Returns true if HostConfigAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of HostConfigAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostConfigAllOf input)
        {
            if (input == null)
                return false;

            return
                (
                    Binds == input.Binds ||
                    Binds != null &&
                    input.Binds != null &&
                    Binds.SequenceEqual(input.Binds)
                ) &&
                (
                    ContainerIDFile == input.ContainerIDFile ||
                    ContainerIDFile != null &&
                    ContainerIDFile.Equals(input.ContainerIDFile)
                ) &&
                (
                    LogConfig == input.LogConfig ||
                    LogConfig != null &&
                    LogConfig.Equals(input.LogConfig)
                ) &&
                (
                    NetworkMode == input.NetworkMode ||
                    NetworkMode != null &&
                    NetworkMode.Equals(input.NetworkMode)
                ) &&
                (
                    PortBindings == input.PortBindings ||
                    PortBindings != null &&
                    input.PortBindings != null &&
                    PortBindings.SequenceEqual(input.PortBindings)
                ) &&
                (
                    RestartPolicy == input.RestartPolicy ||
                    RestartPolicy != null &&
                    RestartPolicy.Equals(input.RestartPolicy)
                ) &&
                (
                    AutoRemove == input.AutoRemove ||
                    AutoRemove != null &&
                    AutoRemove.Equals(input.AutoRemove)
                ) &&
                (
                    VolumeDriver == input.VolumeDriver ||
                    VolumeDriver != null &&
                    VolumeDriver.Equals(input.VolumeDriver)
                ) &&
                (
                    VolumesFrom == input.VolumesFrom ||
                    VolumesFrom != null &&
                    input.VolumesFrom != null &&
                    VolumesFrom.SequenceEqual(input.VolumesFrom)
                ) &&
                (
                    Mounts == input.Mounts ||
                    Mounts != null &&
                    input.Mounts != null &&
                    Mounts.SequenceEqual(input.Mounts)
                ) &&
                (
                    Capabilities == input.Capabilities ||
                    Capabilities != null &&
                    input.Capabilities != null &&
                    Capabilities.SequenceEqual(input.Capabilities)
                ) &&
                (
                    CapAdd == input.CapAdd ||
                    CapAdd != null &&
                    input.CapAdd != null &&
                    CapAdd.SequenceEqual(input.CapAdd)
                ) &&
                (
                    CapDrop == input.CapDrop ||
                    CapDrop != null &&
                    input.CapDrop != null &&
                    CapDrop.SequenceEqual(input.CapDrop)
                ) &&
                (
                    Dns == input.Dns ||
                    Dns != null &&
                    input.Dns != null &&
                    Dns.SequenceEqual(input.Dns)
                ) &&
                (
                    DnsOptions == input.DnsOptions ||
                    DnsOptions != null &&
                    input.DnsOptions != null &&
                    DnsOptions.SequenceEqual(input.DnsOptions)
                ) &&
                (
                    DnsSearch == input.DnsSearch ||
                    DnsSearch != null &&
                    input.DnsSearch != null &&
                    DnsSearch.SequenceEqual(input.DnsSearch)
                ) &&
                (
                    ExtraHosts == input.ExtraHosts ||
                    ExtraHosts != null &&
                    input.ExtraHosts != null &&
                    ExtraHosts.SequenceEqual(input.ExtraHosts)
                ) &&
                (
                    GroupAdd == input.GroupAdd ||
                    GroupAdd != null &&
                    input.GroupAdd != null &&
                    GroupAdd.SequenceEqual(input.GroupAdd)
                ) &&
                (
                    IpcMode == input.IpcMode ||
                    IpcMode != null &&
                    IpcMode.Equals(input.IpcMode)
                ) &&
                (
                    Cgroup == input.Cgroup ||
                    Cgroup != null &&
                    Cgroup.Equals(input.Cgroup)
                ) &&
                (
                    Links == input.Links ||
                    Links != null &&
                    input.Links != null &&
                    Links.SequenceEqual(input.Links)
                ) &&
                (
                    OomScoreAdj == input.OomScoreAdj ||
                    OomScoreAdj != null &&
                    OomScoreAdj.Equals(input.OomScoreAdj)
                ) &&
                (
                    PidMode == input.PidMode ||
                    PidMode != null &&
                    PidMode.Equals(input.PidMode)
                ) &&
                (
                    Privileged == input.Privileged ||
                    Privileged != null &&
                    Privileged.Equals(input.Privileged)
                ) &&
                (
                    PublishAllPorts == input.PublishAllPorts ||
                    PublishAllPorts != null &&
                    PublishAllPorts.Equals(input.PublishAllPorts)
                ) &&
                (
                    ReadonlyRootfs == input.ReadonlyRootfs ||
                    ReadonlyRootfs != null &&
                    ReadonlyRootfs.Equals(input.ReadonlyRootfs)
                ) &&
                (
                    SecurityOpt == input.SecurityOpt ||
                    SecurityOpt != null &&
                    input.SecurityOpt != null &&
                    SecurityOpt.SequenceEqual(input.SecurityOpt)
                ) &&
                (
                    StorageOpt == input.StorageOpt ||
                    StorageOpt != null &&
                    input.StorageOpt != null &&
                    StorageOpt.SequenceEqual(input.StorageOpt)
                ) &&
                (
                    Tmpfs == input.Tmpfs ||
                    Tmpfs != null &&
                    input.Tmpfs != null &&
                    Tmpfs.SequenceEqual(input.Tmpfs)
                ) &&
                (
                    UTSMode == input.UTSMode ||
                    UTSMode != null &&
                    UTSMode.Equals(input.UTSMode)
                ) &&
                (
                    UsernsMode == input.UsernsMode ||
                    UsernsMode != null &&
                    UsernsMode.Equals(input.UsernsMode)
                ) &&
                (
                    ShmSize == input.ShmSize ||
                    ShmSize != null &&
                    ShmSize.Equals(input.ShmSize)
                ) &&
                (
                    Sysctls == input.Sysctls ||
                    Sysctls != null &&
                    input.Sysctls != null &&
                    Sysctls.SequenceEqual(input.Sysctls)
                ) &&
                (
                    Runtime == input.Runtime ||
                    Runtime != null &&
                    Runtime.Equals(input.Runtime)
                ) &&
                (
                    ConsoleSize == input.ConsoleSize ||
                    ConsoleSize != null &&
                    input.ConsoleSize != null &&
                    ConsoleSize.SequenceEqual(input.ConsoleSize)
                ) &&
                (
                    Isolation == input.Isolation ||
                    Isolation != null &&
                    Isolation.Equals(input.Isolation)
                ) &&
                (
                    MaskedPaths == input.MaskedPaths ||
                    MaskedPaths != null &&
                    input.MaskedPaths != null &&
                    MaskedPaths.SequenceEqual(input.MaskedPaths)
                ) &&
                (
                    ReadonlyPaths == input.ReadonlyPaths ||
                    ReadonlyPaths != null &&
                    input.ReadonlyPaths != null &&
                    ReadonlyPaths.SequenceEqual(input.ReadonlyPaths)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ShmSize (int) minimum
            if (ShmSize < 0)
                yield return new ValidationResult(
                    "Invalid value for ShmSize, must be a value greater than or equal to 0.", new[] {"ShmSize"});
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostConfigAllOf {\n");
            sb.Append("  Binds: ").Append(Binds).Append("\n");
            sb.Append("  ContainerIDFile: ").Append(ContainerIDFile).Append("\n");
            sb.Append("  LogConfig: ").Append(LogConfig).Append("\n");
            sb.Append("  NetworkMode: ").Append(NetworkMode).Append("\n");
            sb.Append("  PortBindings: ").Append(PortBindings).Append("\n");
            sb.Append("  RestartPolicy: ").Append(RestartPolicy).Append("\n");
            sb.Append("  AutoRemove: ").Append(AutoRemove).Append("\n");
            sb.Append("  VolumeDriver: ").Append(VolumeDriver).Append("\n");
            sb.Append("  VolumesFrom: ").Append(VolumesFrom).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  CapAdd: ").Append(CapAdd).Append("\n");
            sb.Append("  CapDrop: ").Append(CapDrop).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  DnsOptions: ").Append(DnsOptions).Append("\n");
            sb.Append("  DnsSearch: ").Append(DnsSearch).Append("\n");
            sb.Append("  ExtraHosts: ").Append(ExtraHosts).Append("\n");
            sb.Append("  GroupAdd: ").Append(GroupAdd).Append("\n");
            sb.Append("  IpcMode: ").Append(IpcMode).Append("\n");
            sb.Append("  Cgroup: ").Append(Cgroup).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  OomScoreAdj: ").Append(OomScoreAdj).Append("\n");
            sb.Append("  PidMode: ").Append(PidMode).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  PublishAllPorts: ").Append(PublishAllPorts).Append("\n");
            sb.Append("  ReadonlyRootfs: ").Append(ReadonlyRootfs).Append("\n");
            sb.Append("  SecurityOpt: ").Append(SecurityOpt).Append("\n");
            sb.Append("  StorageOpt: ").Append(StorageOpt).Append("\n");
            sb.Append("  Tmpfs: ").Append(Tmpfs).Append("\n");
            sb.Append("  UTSMode: ").Append(UTSMode).Append("\n");
            sb.Append("  UsernsMode: ").Append(UsernsMode).Append("\n");
            sb.Append("  ShmSize: ").Append(ShmSize).Append("\n");
            sb.Append("  Sysctls: ").Append(Sysctls).Append("\n");
            sb.Append("  Runtime: ").Append(Runtime).Append("\n");
            sb.Append("  ConsoleSize: ").Append(ConsoleSize).Append("\n");
            sb.Append("  Isolation: ").Append(Isolation).Append("\n");
            sb.Append("  MaskedPaths: ").Append(MaskedPaths).Append("\n");
            sb.Append("  ReadonlyPaths: ").Append(ReadonlyPaths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as HostConfigAllOf);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Binds != null)
                    hashCode = hashCode * 59 + Binds.GetHashCode();
                if (ContainerIDFile != null)
                    hashCode = hashCode * 59 + ContainerIDFile.GetHashCode();
                if (LogConfig != null)
                    hashCode = hashCode * 59 + LogConfig.GetHashCode();
                if (NetworkMode != null)
                    hashCode = hashCode * 59 + NetworkMode.GetHashCode();
                if (PortBindings != null)
                    hashCode = hashCode * 59 + PortBindings.GetHashCode();
                if (RestartPolicy != null)
                    hashCode = hashCode * 59 + RestartPolicy.GetHashCode();
                if (AutoRemove != null)
                    hashCode = hashCode * 59 + AutoRemove.GetHashCode();
                if (VolumeDriver != null)
                    hashCode = hashCode * 59 + VolumeDriver.GetHashCode();
                if (VolumesFrom != null)
                    hashCode = hashCode * 59 + VolumesFrom.GetHashCode();
                if (Mounts != null)
                    hashCode = hashCode * 59 + Mounts.GetHashCode();
                if (Capabilities != null)
                    hashCode = hashCode * 59 + Capabilities.GetHashCode();
                if (CapAdd != null)
                    hashCode = hashCode * 59 + CapAdd.GetHashCode();
                if (CapDrop != null)
                    hashCode = hashCode * 59 + CapDrop.GetHashCode();
                if (Dns != null)
                    hashCode = hashCode * 59 + Dns.GetHashCode();
                if (DnsOptions != null)
                    hashCode = hashCode * 59 + DnsOptions.GetHashCode();
                if (DnsSearch != null)
                    hashCode = hashCode * 59 + DnsSearch.GetHashCode();
                if (ExtraHosts != null)
                    hashCode = hashCode * 59 + ExtraHosts.GetHashCode();
                if (GroupAdd != null)
                    hashCode = hashCode * 59 + GroupAdd.GetHashCode();
                if (IpcMode != null)
                    hashCode = hashCode * 59 + IpcMode.GetHashCode();
                if (Cgroup != null)
                    hashCode = hashCode * 59 + Cgroup.GetHashCode();
                if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                if (OomScoreAdj != null)
                    hashCode = hashCode * 59 + OomScoreAdj.GetHashCode();
                if (PidMode != null)
                    hashCode = hashCode * 59 + PidMode.GetHashCode();
                if (Privileged != null)
                    hashCode = hashCode * 59 + Privileged.GetHashCode();
                if (PublishAllPorts != null)
                    hashCode = hashCode * 59 + PublishAllPorts.GetHashCode();
                if (ReadonlyRootfs != null)
                    hashCode = hashCode * 59 + ReadonlyRootfs.GetHashCode();
                if (SecurityOpt != null)
                    hashCode = hashCode * 59 + SecurityOpt.GetHashCode();
                if (StorageOpt != null)
                    hashCode = hashCode * 59 + StorageOpt.GetHashCode();
                if (Tmpfs != null)
                    hashCode = hashCode * 59 + Tmpfs.GetHashCode();
                if (UTSMode != null)
                    hashCode = hashCode * 59 + UTSMode.GetHashCode();
                if (UsernsMode != null)
                    hashCode = hashCode * 59 + UsernsMode.GetHashCode();
                if (ShmSize != null)
                    hashCode = hashCode * 59 + ShmSize.GetHashCode();
                if (Sysctls != null)
                    hashCode = hashCode * 59 + Sysctls.GetHashCode();
                if (Runtime != null)
                    hashCode = hashCode * 59 + Runtime.GetHashCode();
                if (ConsoleSize != null)
                    hashCode = hashCode * 59 + ConsoleSize.GetHashCode();
                if (Isolation != null)
                    hashCode = hashCode * 59 + Isolation.GetHashCode();
                if (MaskedPaths != null)
                    hashCode = hashCode * 59 + MaskedPaths.GetHashCode();
                if (ReadonlyPaths != null)
                    hashCode = hashCode * 59 + ReadonlyPaths.GetHashCode();
                return hashCode;
            }
        }
    }
}