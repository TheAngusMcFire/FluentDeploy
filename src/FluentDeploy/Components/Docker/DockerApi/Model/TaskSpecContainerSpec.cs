/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     Container spec for the service.  &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  &gt; **Note**: ContainerSpec,
    ///     NetworkAttachmentSpec, and PluginSpec are &gt; mutually exclusive. PluginSpec is only used when the Runtime field
    ///     &gt; is set to &#x60;plugin&#x60;. NetworkAttachmentSpec is used when the Runtime &gt; field is set to &#x60;
    ///     attachment&#x60;.
    /// </summary>
    [DataContract]
    public class TaskSpecContainerSpec : IEquatable<TaskSpecContainerSpec>, IValidatableObject
    {
        /// <summary>
        ///     Isolation technology of the containers running the service. (Windows only)
        /// </summary>
        /// <value>Isolation technology of the containers running the service. (Windows only) </value>
        [JsonConverter(typeof(JsonStringEnumMemberConverter))]
        public enum IsolationEnum
        {
            /// <summary>
            ///     Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")] Default = 1,

            /// <summary>
            ///     Enum Process for value: process
            /// </summary>
            [EnumMember(Value = "process")] Process = 2,

            /// <summary>
            ///     Enum Hyperv for value: hyperv
            /// </summary>
            [EnumMember(Value = "hyperv")] Hyperv = 3
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="TaskSpecContainerSpec" /> class.
        /// </summary>
        /// <param name="image">The image name to use for the container.</param>
        /// <param name="labels">User-defined key/value data..</param>
        /// <param name="command">The command to be run in the image..</param>
        /// <param name="args">Arguments to the command..</param>
        /// <param name="hostname">
        ///     The hostname to use for the container, as a valid [RFC
        ///     1123](https://tools.ietf.org/html/rfc1123) hostname. .
        /// </param>
        /// <param name="env">A list of environment variables in the form &#x60;VAR&#x3D;value&#x60;. .</param>
        /// <param name="dir">The working directory for commands to run in..</param>
        /// <param name="user">The user inside the container..</param>
        /// <param name="groups">A list of additional groups that the container process will run as. .</param>
        /// <param name="privileges">privileges.</param>
        /// <param name="tTY">Whether a pseudo-TTY should be allocated..</param>
        /// <param name="openStdin">Open &#x60;stdin&#x60;.</param>
        /// <param name="readOnly">Mount the container&#39;s root filesystem as read only..</param>
        /// <param name="mounts">Specification for mounts to be added to containers created as part of the service. .</param>
        /// <param name="stopSignal">Signal to stop the container..</param>
        /// <param name="stopGracePeriod">Amount of time to wait for the container to terminate before forcefully killing it. .</param>
        /// <param name="healthCheck">healthCheck.</param>
        /// <param name="hosts">
        ///     A list of hostname/IP mappings to add to the container&#39;s &#x60;hosts&#x60; file. The format of
        ///     extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:
        ///     IP_address canonical_hostname [aliases...] .
        /// </param>
        /// <param name="dNSConfig">dNSConfig.</param>
        /// <param name="secrets">Secrets contains references to zero or more secrets that will be exposed to the service. .</param>
        /// <param name="configs">Configs contains references to zero or more configs that will be exposed to the service. .</param>
        /// <param name="isolation">Isolation technology of the containers running the service. (Windows only) .</param>
        /// <param name="init">
        ///     Run an init inside the container that forwards signals and reaps processes. This field is omitted if
        ///     empty, and the default (as configured on the daemon) is used. .
        /// </param>
        /// <param name="sysctls">
        ///     Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services
        ///     accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no
        ///     guarantees or checks are made about their suitability for a clustered environment, and it&#39;s up to the user to
        ///     determine whether a given sysctl will work properly in a Service. .
        /// </param>
        public TaskSpecContainerSpec(string image = default, Dictionary<string, string> labels = default,
            List<string> command = default, List<string> args = default, string hostname = default,
            List<string> env = default, string dir = default, string user = default, List<string> groups = default,
            TaskSpecContainerSpecPrivileges privileges = default, bool tTY = default, bool openStdin = default,
            bool readOnly = default, List<Mount> mounts = default, string stopSignal = default,
            long stopGracePeriod = default, HealthConfig healthCheck = default, List<string> hosts = default,
            TaskSpecContainerSpecDNSConfig dNSConfig = default, List<TaskSpecContainerSpecSecrets> secrets = default,
            List<TaskSpecContainerSpecConfigs> configs = default, IsolationEnum? isolation = default,
            bool? init = default, Dictionary<string, string> sysctls = default)
        {
            Init = init;
            Image = image;
            Labels = labels;
            Command = command;
            Args = args;
            Hostname = hostname;
            Env = env;
            Dir = dir;
            User = user;
            Groups = groups;
            Privileges = privileges;
            TTY = tTY;
            OpenStdin = openStdin;
            ReadOnly = readOnly;
            Mounts = mounts;
            StopSignal = stopSignal;
            StopGracePeriod = stopGracePeriod;
            HealthCheck = healthCheck;
            Hosts = hosts;
            DNSConfig = dNSConfig;
            Secrets = secrets;
            Configs = configs;
            Isolation = isolation;
            Init = init;
            Sysctls = sysctls;
        }

        /// <summary>
        ///     Isolation technology of the containers running the service. (Windows only)
        /// </summary>
        /// <value>Isolation technology of the containers running the service. (Windows only) </value>
        [DataMember(Name = "Isolation", EmitDefaultValue = false)]
        public IsolationEnum? Isolation { get; set; }

        /// <summary>
        ///     The image name to use for the container
        /// </summary>
        /// <value>The image name to use for the container</value>
        [DataMember(Name = "Image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        ///     User-defined key/value data.
        /// </summary>
        /// <value>User-defined key/value data.</value>
        [DataMember(Name = "Labels", EmitDefaultValue = false)]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        ///     The command to be run in the image.
        /// </summary>
        /// <value>The command to be run in the image.</value>
        [DataMember(Name = "Command", EmitDefaultValue = false)]
        public List<string> Command { get; set; }

        /// <summary>
        ///     Arguments to the command.
        /// </summary>
        /// <value>Arguments to the command.</value>
        [DataMember(Name = "Args", EmitDefaultValue = false)]
        public List<string> Args { get; set; }

        /// <summary>
        ///     The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
        /// </summary>
        /// <value>The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname. </value>
        [DataMember(Name = "Hostname", EmitDefaultValue = false)]
        public string Hostname { get; set; }

        /// <summary>
        ///     A list of environment variables in the form &#x60;VAR&#x3D;value&#x60;.
        /// </summary>
        /// <value>A list of environment variables in the form &#x60;VAR&#x3D;value&#x60;. </value>
        [DataMember(Name = "Env", EmitDefaultValue = false)]
        public List<string> Env { get; set; }

        /// <summary>
        ///     The working directory for commands to run in.
        /// </summary>
        /// <value>The working directory for commands to run in.</value>
        [DataMember(Name = "Dir", EmitDefaultValue = false)]
        public string Dir { get; set; }

        /// <summary>
        ///     The user inside the container.
        /// </summary>
        /// <value>The user inside the container.</value>
        [DataMember(Name = "User", EmitDefaultValue = false)]
        public string User { get; set; }

        /// <summary>
        ///     A list of additional groups that the container process will run as.
        /// </summary>
        /// <value>A list of additional groups that the container process will run as. </value>
        [DataMember(Name = "Groups", EmitDefaultValue = false)]
        public List<string> Groups { get; set; }

        /// <summary>
        ///     Gets or Sets Privileges
        /// </summary>
        [DataMember(Name = "Privileges", EmitDefaultValue = false)]
        public TaskSpecContainerSpecPrivileges Privileges { get; set; }

        /// <summary>
        ///     Whether a pseudo-TTY should be allocated.
        /// </summary>
        /// <value>Whether a pseudo-TTY should be allocated.</value>
        [DataMember(Name = "TTY", EmitDefaultValue = false)]
        public bool TTY { get; set; }

        /// <summary>
        ///     Open &#x60;stdin&#x60;
        /// </summary>
        /// <value>Open &#x60;stdin&#x60;</value>
        [DataMember(Name = "OpenStdin", EmitDefaultValue = false)]
        public bool OpenStdin { get; set; }

        /// <summary>
        ///     Mount the container&#39;s root filesystem as read only.
        /// </summary>
        /// <value>Mount the container&#39;s root filesystem as read only.</value>
        [DataMember(Name = "ReadOnly", EmitDefaultValue = false)]
        public bool ReadOnly { get; set; }

        /// <summary>
        ///     Specification for mounts to be added to containers created as part of the service.
        /// </summary>
        /// <value>Specification for mounts to be added to containers created as part of the service. </value>
        [DataMember(Name = "Mounts", EmitDefaultValue = false)]
        public List<Mount> Mounts { get; set; }

        /// <summary>
        ///     Signal to stop the container.
        /// </summary>
        /// <value>Signal to stop the container.</value>
        [DataMember(Name = "StopSignal", EmitDefaultValue = false)]
        public string StopSignal { get; set; }

        /// <summary>
        ///     Amount of time to wait for the container to terminate before forcefully killing it.
        /// </summary>
        /// <value>Amount of time to wait for the container to terminate before forcefully killing it. </value>
        [DataMember(Name = "StopGracePeriod", EmitDefaultValue = false)]
        public long StopGracePeriod { get; set; }

        /// <summary>
        ///     Gets or Sets HealthCheck
        /// </summary>
        [DataMember(Name = "HealthCheck", EmitDefaultValue = false)]
        public HealthConfig HealthCheck { get; set; }

        /// <summary>
        ///     A list of hostname/IP mappings to add to the container&#39;s &#x60;hosts&#x60; file. The format of extra hosts is
        ///     specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address
        ///     canonical_hostname [aliases...]
        /// </summary>
        /// <value>
        ///     A list of hostname/IP mappings to add to the container&#39;s &#x60;hosts&#x60; file. The format of extra hosts
        ///     is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address
        ///     canonical_hostname [aliases...]
        /// </value>
        [DataMember(Name = "Hosts", EmitDefaultValue = false)]
        public List<string> Hosts { get; set; }

        /// <summary>
        ///     Gets or Sets DNSConfig
        /// </summary>
        [DataMember(Name = "DNSConfig", EmitDefaultValue = false)]
        public TaskSpecContainerSpecDNSConfig DNSConfig { get; set; }

        /// <summary>
        ///     Secrets contains references to zero or more secrets that will be exposed to the service.
        /// </summary>
        /// <value>Secrets contains references to zero or more secrets that will be exposed to the service. </value>
        [DataMember(Name = "Secrets", EmitDefaultValue = false)]
        public List<TaskSpecContainerSpecSecrets> Secrets { get; set; }

        /// <summary>
        ///     Configs contains references to zero or more configs that will be exposed to the service.
        /// </summary>
        /// <value>Configs contains references to zero or more configs that will be exposed to the service. </value>
        [DataMember(Name = "Configs", EmitDefaultValue = false)]
        public List<TaskSpecContainerSpecConfigs> Configs { get; set; }


        /// <summary>
        ///     Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the
        ///     default (as configured on the daemon) is used.
        /// </summary>
        /// <value>
        ///     Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and
        ///     the default (as configured on the daemon) is used.
        /// </value>
        [DataMember(Name = "Init", EmitDefaultValue = true)]
        public bool? Init { get; set; }

        /// <summary>
        ///     Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same
        ///     sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks
        ///     are made about their suitability for a clustered environment, and it&#39;s up to the user to determine whether a
        ///     given sysctl will work properly in a Service.
        /// </summary>
        /// <value>
        ///     Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same
        ///     sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks
        ///     are made about their suitability for a clustered environment, and it&#39;s up to the user to determine whether a
        ///     given sysctl will work properly in a Service.
        /// </value>
        [DataMember(Name = "Sysctls", EmitDefaultValue = false)]
        public Dictionary<string, string> Sysctls { get; set; }

        /// <summary>
        ///     Returns true if TaskSpecContainerSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskSpecContainerSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskSpecContainerSpec input)
        {
            if (input == null)
                return false;

            return
                (
                    Image == input.Image ||
                    Image != null &&
                    Image.Equals(input.Image)
                ) &&
                (
                    Labels == input.Labels ||
                    Labels != null &&
                    input.Labels != null &&
                    Labels.SequenceEqual(input.Labels)
                ) &&
                (
                    Command == input.Command ||
                    Command != null &&
                    input.Command != null &&
                    Command.SequenceEqual(input.Command)
                ) &&
                (
                    Args == input.Args ||
                    Args != null &&
                    input.Args != null &&
                    Args.SequenceEqual(input.Args)
                ) &&
                (
                    Hostname == input.Hostname ||
                    Hostname != null &&
                    Hostname.Equals(input.Hostname)
                ) &&
                (
                    Env == input.Env ||
                    Env != null &&
                    input.Env != null &&
                    Env.SequenceEqual(input.Env)
                ) &&
                (
                    Dir == input.Dir ||
                    Dir != null &&
                    Dir.Equals(input.Dir)
                ) &&
                (
                    User == input.User ||
                    User != null &&
                    User.Equals(input.User)
                ) &&
                (
                    Groups == input.Groups ||
                    Groups != null &&
                    input.Groups != null &&
                    Groups.SequenceEqual(input.Groups)
                ) &&
                (
                    Privileges == input.Privileges ||
                    Privileges != null &&
                    Privileges.Equals(input.Privileges)
                ) &&
                (
                    TTY == input.TTY ||
                    TTY != null &&
                    TTY.Equals(input.TTY)
                ) &&
                (
                    OpenStdin == input.OpenStdin ||
                    OpenStdin != null &&
                    OpenStdin.Equals(input.OpenStdin)
                ) &&
                (
                    ReadOnly == input.ReadOnly ||
                    ReadOnly != null &&
                    ReadOnly.Equals(input.ReadOnly)
                ) &&
                (
                    Mounts == input.Mounts ||
                    Mounts != null &&
                    input.Mounts != null &&
                    Mounts.SequenceEqual(input.Mounts)
                ) &&
                (
                    StopSignal == input.StopSignal ||
                    StopSignal != null &&
                    StopSignal.Equals(input.StopSignal)
                ) &&
                (
                    StopGracePeriod == input.StopGracePeriod ||
                    StopGracePeriod != null &&
                    StopGracePeriod.Equals(input.StopGracePeriod)
                ) &&
                (
                    HealthCheck == input.HealthCheck ||
                    HealthCheck != null &&
                    HealthCheck.Equals(input.HealthCheck)
                ) &&
                (
                    Hosts == input.Hosts ||
                    Hosts != null &&
                    input.Hosts != null &&
                    Hosts.SequenceEqual(input.Hosts)
                ) &&
                (
                    DNSConfig == input.DNSConfig ||
                    DNSConfig != null &&
                    DNSConfig.Equals(input.DNSConfig)
                ) &&
                (
                    Secrets == input.Secrets ||
                    Secrets != null &&
                    input.Secrets != null &&
                    Secrets.SequenceEqual(input.Secrets)
                ) &&
                (
                    Configs == input.Configs ||
                    Configs != null &&
                    input.Configs != null &&
                    Configs.SequenceEqual(input.Configs)
                ) &&
                (
                    Isolation == input.Isolation ||
                    Isolation != null &&
                    Isolation.Equals(input.Isolation)
                ) &&
                (
                    Init == input.Init ||
                    Init != null &&
                    Init.Equals(input.Init)
                ) &&
                (
                    Sysctls == input.Sysctls ||
                    Sysctls != null &&
                    input.Sysctls != null &&
                    Sysctls.SequenceEqual(input.Sysctls)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskSpecContainerSpec {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Args: ").Append(Args).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  Dir: ").Append(Dir).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Privileges: ").Append(Privileges).Append("\n");
            sb.Append("  TTY: ").Append(TTY).Append("\n");
            sb.Append("  OpenStdin: ").Append(OpenStdin).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Mounts: ").Append(Mounts).Append("\n");
            sb.Append("  StopSignal: ").Append(StopSignal).Append("\n");
            sb.Append("  StopGracePeriod: ").Append(StopGracePeriod).Append("\n");
            sb.Append("  HealthCheck: ").Append(HealthCheck).Append("\n");
            sb.Append("  Hosts: ").Append(Hosts).Append("\n");
            sb.Append("  DNSConfig: ").Append(DNSConfig).Append("\n");
            sb.Append("  Secrets: ").Append(Secrets).Append("\n");
            sb.Append("  Configs: ").Append(Configs).Append("\n");
            sb.Append("  Isolation: ").Append(Isolation).Append("\n");
            sb.Append("  Init: ").Append(Init).Append("\n");
            sb.Append("  Sysctls: ").Append(Sysctls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TaskSpecContainerSpec);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                if (Command != null)
                    hashCode = hashCode * 59 + Command.GetHashCode();
                if (Args != null)
                    hashCode = hashCode * 59 + Args.GetHashCode();
                if (Hostname != null)
                    hashCode = hashCode * 59 + Hostname.GetHashCode();
                if (Env != null)
                    hashCode = hashCode * 59 + Env.GetHashCode();
                if (Dir != null)
                    hashCode = hashCode * 59 + Dir.GetHashCode();
                if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                if (Privileges != null)
                    hashCode = hashCode * 59 + Privileges.GetHashCode();
                if (TTY != null)
                    hashCode = hashCode * 59 + TTY.GetHashCode();
                if (OpenStdin != null)
                    hashCode = hashCode * 59 + OpenStdin.GetHashCode();
                if (ReadOnly != null)
                    hashCode = hashCode * 59 + ReadOnly.GetHashCode();
                if (Mounts != null)
                    hashCode = hashCode * 59 + Mounts.GetHashCode();
                if (StopSignal != null)
                    hashCode = hashCode * 59 + StopSignal.GetHashCode();
                if (StopGracePeriod != null)
                    hashCode = hashCode * 59 + StopGracePeriod.GetHashCode();
                if (HealthCheck != null)
                    hashCode = hashCode * 59 + HealthCheck.GetHashCode();
                if (Hosts != null)
                    hashCode = hashCode * 59 + Hosts.GetHashCode();
                if (DNSConfig != null)
                    hashCode = hashCode * 59 + DNSConfig.GetHashCode();
                if (Secrets != null)
                    hashCode = hashCode * 59 + Secrets.GetHashCode();
                if (Configs != null)
                    hashCode = hashCode * 59 + Configs.GetHashCode();
                if (Isolation != null)
                    hashCode = hashCode * 59 + Isolation.GetHashCode();
                if (Init != null)
                    hashCode = hashCode * 59 + Init.GetHashCode();
                if (Sysctls != null)
                    hashCode = hashCode * 59 + Sysctls.GetHashCode();
                return hashCode;
            }
        }
    }
}