/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     Configuration for a network endpoint.
    /// </summary>
    [DataContract]
    public class EndpointSettings : IEquatable<EndpointSettings>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="EndpointSettings" /> class.
        /// </summary>
        /// <param name="iPAMConfig">iPAMConfig.</param>
        /// <param name="links">links.</param>
        /// <param name="aliases">aliases.</param>
        /// <param name="networkID">Unique ID of the network. .</param>
        /// <param name="endpointID">Unique ID for the service endpoint in a Sandbox. .</param>
        /// <param name="gateway">Gateway address for this network. .</param>
        /// <param name="iPAddress">IPv4 address. .</param>
        /// <param name="iPPrefixLen">Mask length of the IPv4 address. .</param>
        /// <param name="iPv6Gateway">IPv6 gateway address. .</param>
        /// <param name="globalIPv6Address">Global IPv6 address. .</param>
        /// <param name="globalIPv6PrefixLen">Mask length of the global IPv6 address. .</param>
        /// <param name="macAddress">MAC address for the endpoint on this network. .</param>
        /// <param name="driverOpts">
        ///     DriverOpts is a mapping of driver options and values. These options are passed directly to the
        ///     driver and are driver specific. .
        /// </param>
        public EndpointSettings(EndpointIPAMConfig iPAMConfig = default, List<string> links = default,
            List<string> aliases = default, string networkID = default, string endpointID = default,
            string gateway = default, string iPAddress = default, int iPPrefixLen = default,
            string iPv6Gateway = default, string globalIPv6Address = default, long globalIPv6PrefixLen = default,
            string macAddress = default, Dictionary<string, string> driverOpts = default)
        {
            IPAMConfig = iPAMConfig;
            DriverOpts = driverOpts;
            IPAMConfig = iPAMConfig;
            Links = links;
            Aliases = aliases;
            NetworkID = networkID;
            EndpointID = endpointID;
            Gateway = gateway;
            IPAddress = iPAddress;
            IPPrefixLen = iPPrefixLen;
            IPv6Gateway = iPv6Gateway;
            GlobalIPv6Address = globalIPv6Address;
            GlobalIPv6PrefixLen = globalIPv6PrefixLen;
            MacAddress = macAddress;
            DriverOpts = driverOpts;
        }

        /// <summary>
        ///     Gets or Sets IPAMConfig
        /// </summary>
        [DataMember(Name = "IPAMConfig", EmitDefaultValue = true)]
        public EndpointIPAMConfig IPAMConfig { get; set; }

        /// <summary>
        ///     Gets or Sets Links
        /// </summary>
        [DataMember(Name = "Links", EmitDefaultValue = false)]
        public List<string> Links { get; set; }

        /// <summary>
        ///     Gets or Sets Aliases
        /// </summary>
        [DataMember(Name = "Aliases", EmitDefaultValue = false)]
        public List<string> Aliases { get; set; }

        /// <summary>
        ///     Unique ID of the network.
        /// </summary>
        /// <value>Unique ID of the network. </value>
        [DataMember(Name = "NetworkID", EmitDefaultValue = false)]
        public string NetworkID { get; set; }

        /// <summary>
        ///     Unique ID for the service endpoint in a Sandbox.
        /// </summary>
        /// <value>Unique ID for the service endpoint in a Sandbox. </value>
        [DataMember(Name = "EndpointID", EmitDefaultValue = false)]
        public string EndpointID { get; set; }

        /// <summary>
        ///     Gateway address for this network.
        /// </summary>
        /// <value>Gateway address for this network. </value>
        [DataMember(Name = "Gateway", EmitDefaultValue = false)]
        public string Gateway { get; set; }

        /// <summary>
        ///     IPv4 address.
        /// </summary>
        /// <value>IPv4 address. </value>
        [DataMember(Name = "IPAddress", EmitDefaultValue = false)]
        public string IPAddress { get; set; }

        /// <summary>
        ///     Mask length of the IPv4 address.
        /// </summary>
        /// <value>Mask length of the IPv4 address. </value>
        [DataMember(Name = "IPPrefixLen", EmitDefaultValue = false)]
        public int IPPrefixLen { get; set; }

        /// <summary>
        ///     IPv6 gateway address.
        /// </summary>
        /// <value>IPv6 gateway address. </value>
        [DataMember(Name = "IPv6Gateway", EmitDefaultValue = false)]
        public string IPv6Gateway { get; set; }

        /// <summary>
        ///     Global IPv6 address.
        /// </summary>
        /// <value>Global IPv6 address. </value>
        [DataMember(Name = "GlobalIPv6Address", EmitDefaultValue = false)]
        public string GlobalIPv6Address { get; set; }

        /// <summary>
        ///     Mask length of the global IPv6 address.
        /// </summary>
        /// <value>Mask length of the global IPv6 address. </value>
        [DataMember(Name = "GlobalIPv6PrefixLen", EmitDefaultValue = false)]
        public long GlobalIPv6PrefixLen { get; set; }

        /// <summary>
        ///     MAC address for the endpoint on this network.
        /// </summary>
        /// <value>MAC address for the endpoint on this network. </value>
        [DataMember(Name = "MacAddress", EmitDefaultValue = false)]
        public string MacAddress { get; set; }

        /// <summary>
        ///     DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are
        ///     driver specific.
        /// </summary>
        /// <value>
        ///     DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are
        ///     driver specific.
        /// </value>
        [DataMember(Name = "DriverOpts", EmitDefaultValue = true)]
        public Dictionary<string, string> DriverOpts { get; set; }

        /// <summary>
        ///     Returns true if EndpointSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpointSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpointSettings input)
        {
            if (input == null)
                return false;

            return
                (
                    IPAMConfig == input.IPAMConfig ||
                    IPAMConfig != null &&
                    IPAMConfig.Equals(input.IPAMConfig)
                ) &&
                (
                    Links == input.Links ||
                    Links != null &&
                    input.Links != null &&
                    Links.SequenceEqual(input.Links)
                ) &&
                (
                    Aliases == input.Aliases ||
                    Aliases != null &&
                    input.Aliases != null &&
                    Aliases.SequenceEqual(input.Aliases)
                ) &&
                (
                    NetworkID == input.NetworkID ||
                    NetworkID != null &&
                    NetworkID.Equals(input.NetworkID)
                ) &&
                (
                    EndpointID == input.EndpointID ||
                    EndpointID != null &&
                    EndpointID.Equals(input.EndpointID)
                ) &&
                (
                    Gateway == input.Gateway ||
                    Gateway != null &&
                    Gateway.Equals(input.Gateway)
                ) &&
                (
                    IPAddress == input.IPAddress ||
                    IPAddress != null &&
                    IPAddress.Equals(input.IPAddress)
                ) &&
                (
                    IPPrefixLen == input.IPPrefixLen ||
                    IPPrefixLen != null &&
                    IPPrefixLen.Equals(input.IPPrefixLen)
                ) &&
                (
                    IPv6Gateway == input.IPv6Gateway ||
                    IPv6Gateway != null &&
                    IPv6Gateway.Equals(input.IPv6Gateway)
                ) &&
                (
                    GlobalIPv6Address == input.GlobalIPv6Address ||
                    GlobalIPv6Address != null &&
                    GlobalIPv6Address.Equals(input.GlobalIPv6Address)
                ) &&
                (
                    GlobalIPv6PrefixLen == input.GlobalIPv6PrefixLen ||
                    GlobalIPv6PrefixLen != null &&
                    GlobalIPv6PrefixLen.Equals(input.GlobalIPv6PrefixLen)
                ) &&
                (
                    MacAddress == input.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(input.MacAddress)
                ) &&
                (
                    DriverOpts == input.DriverOpts ||
                    DriverOpts != null &&
                    input.DriverOpts != null &&
                    DriverOpts.SequenceEqual(input.DriverOpts)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EndpointSettings {\n");
            sb.Append("  IPAMConfig: ").Append(IPAMConfig).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  NetworkID: ").Append(NetworkID).Append("\n");
            sb.Append("  EndpointID: ").Append(EndpointID).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  IPAddress: ").Append(IPAddress).Append("\n");
            sb.Append("  IPPrefixLen: ").Append(IPPrefixLen).Append("\n");
            sb.Append("  IPv6Gateway: ").Append(IPv6Gateway).Append("\n");
            sb.Append("  GlobalIPv6Address: ").Append(GlobalIPv6Address).Append("\n");
            sb.Append("  GlobalIPv6PrefixLen: ").Append(GlobalIPv6PrefixLen).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  DriverOpts: ").Append(DriverOpts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as EndpointSettings);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (IPAMConfig != null)
                    hashCode = hashCode * 59 + IPAMConfig.GetHashCode();
                if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                if (Aliases != null)
                    hashCode = hashCode * 59 + Aliases.GetHashCode();
                if (NetworkID != null)
                    hashCode = hashCode * 59 + NetworkID.GetHashCode();
                if (EndpointID != null)
                    hashCode = hashCode * 59 + EndpointID.GetHashCode();
                if (Gateway != null)
                    hashCode = hashCode * 59 + Gateway.GetHashCode();
                if (IPAddress != null)
                    hashCode = hashCode * 59 + IPAddress.GetHashCode();
                if (IPPrefixLen != null)
                    hashCode = hashCode * 59 + IPPrefixLen.GetHashCode();
                if (IPv6Gateway != null)
                    hashCode = hashCode * 59 + IPv6Gateway.GetHashCode();
                if (GlobalIPv6Address != null)
                    hashCode = hashCode * 59 + GlobalIPv6Address.GetHashCode();
                if (GlobalIPv6PrefixLen != null)
                    hashCode = hashCode * 59 + GlobalIPv6PrefixLen.GetHashCode();
                if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                if (DriverOpts != null)
                    hashCode = hashCode * 59 + DriverOpts.GetHashCode();
                return hashCode;
            }
        }
    }
}