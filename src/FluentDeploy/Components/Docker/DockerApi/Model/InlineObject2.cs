/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.40) is used. For example, calling `/info` is the same as calling `/v1.40/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.40
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace FluentDeploy.Components.Docker.DockerApi.Model
{
    /// <summary>
    ///     InlineObject2
    /// </summary>
    [DataContract]
    public class InlineObject2 : IEquatable<InlineObject2>, IValidatableObject
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="InlineObject2" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject2()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="InlineObject2" /> class.
        /// </summary>
        /// <param name="name">The network&#39;s name. (required).</param>
        /// <param name="checkDuplicate">
        ///     Check for networks with duplicate names. Since Network is primarily keyed based on a
        ///     random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely
        ///     identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best
        ///     effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions. .
        /// </param>
        /// <param name="driver">Name of the network driver plugin to use. (default to &quot;bridge&quot;).</param>
        /// <param name="_internal">Restrict external access to the network..</param>
        /// <param name="attachable">
        ///     Globally scoped network is manually attachable by regular containers from workers in swarm
        ///     mode. .
        /// </param>
        /// <param name="ingress">Ingress network is the network which provides the routing-mesh in swarm mode. .</param>
        /// <param name="iPAM">iPAM.</param>
        /// <param name="enableIPv6">Enable IPv6 on the network..</param>
        /// <param name="options">Network specific options to be used by the drivers..</param>
        /// <param name="labels">User-defined key/value metadata..</param>
        public InlineObject2(string name = default, bool checkDuplicate = default, string driver = "bridge",
            bool _internal = default, bool attachable = default, bool ingress = default, IPAM iPAM = default,
            bool enableIPv6 = default, Dictionary<string, string> options = default,
            Dictionary<string, string> labels = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
                throw new InvalidDataException("name is a required property for InlineObject2 and cannot be null");
            Name = name;

            CheckDuplicate = checkDuplicate;
            // use default value if no "driver" provided
            if (driver == null)
                Driver = "bridge";
            else
                Driver = driver;
            Internal = _internal;
            Attachable = attachable;
            Ingress = ingress;
            IPAM = iPAM;
            EnableIPv6 = enableIPv6;
            Options = options;
            Labels = labels;
        }

        /// <summary>
        ///     The network&#39;s name.
        /// </summary>
        /// <value>The network&#39;s name.</value>
        [DataMember(Name = "Name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        ///     Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name,
        ///     and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is
        ///     no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any
        ///     networks which has the same name but it is not guaranteed to catch all name collisions.
        /// </summary>
        /// <value>
        ///     Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the
        ///     name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID,
        ///     there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of
        ///     any networks which has the same name but it is not guaranteed to catch all name collisions.
        /// </value>
        [DataMember(Name = "CheckDuplicate", EmitDefaultValue = false)]
        public bool CheckDuplicate { get; set; }

        /// <summary>
        ///     Name of the network driver plugin to use.
        /// </summary>
        /// <value>Name of the network driver plugin to use.</value>
        [DataMember(Name = "Driver", EmitDefaultValue = false)]
        public string Driver { get; set; }

        /// <summary>
        ///     Restrict external access to the network.
        /// </summary>
        /// <value>Restrict external access to the network.</value>
        [DataMember(Name = "Internal", EmitDefaultValue = false)]
        public bool Internal { get; set; }

        /// <summary>
        ///     Globally scoped network is manually attachable by regular containers from workers in swarm mode.
        /// </summary>
        /// <value>Globally scoped network is manually attachable by regular containers from workers in swarm mode. </value>
        [DataMember(Name = "Attachable", EmitDefaultValue = false)]
        public bool Attachable { get; set; }

        /// <summary>
        ///     Ingress network is the network which provides the routing-mesh in swarm mode.
        /// </summary>
        /// <value>Ingress network is the network which provides the routing-mesh in swarm mode. </value>
        [DataMember(Name = "Ingress", EmitDefaultValue = false)]
        public bool Ingress { get; set; }

        /// <summary>
        ///     Gets or Sets IPAM
        /// </summary>
        [DataMember(Name = "IPAM", EmitDefaultValue = false)]
        public IPAM IPAM { get; set; }

        /// <summary>
        ///     Enable IPv6 on the network.
        /// </summary>
        /// <value>Enable IPv6 on the network.</value>
        [DataMember(Name = "EnableIPv6", EmitDefaultValue = false)]
        public bool EnableIPv6 { get; set; }

        /// <summary>
        ///     Network specific options to be used by the drivers.
        /// </summary>
        /// <value>Network specific options to be used by the drivers.</value>
        [DataMember(Name = "Options", EmitDefaultValue = false)]
        public Dictionary<string, string> Options { get; set; }

        /// <summary>
        ///     User-defined key/value metadata.
        /// </summary>
        /// <value>User-defined key/value metadata.</value>
        [DataMember(Name = "Labels", EmitDefaultValue = false)]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        ///     Returns true if InlineObject2 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject2 input)
        {
            if (input == null)
                return false;

            return
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) &&
                (
                    CheckDuplicate == input.CheckDuplicate ||
                    CheckDuplicate != null &&
                    CheckDuplicate.Equals(input.CheckDuplicate)
                ) &&
                (
                    Driver == input.Driver ||
                    Driver != null &&
                    Driver.Equals(input.Driver)
                ) &&
                (
                    Internal == input.Internal ||
                    Internal != null &&
                    Internal.Equals(input.Internal)
                ) &&
                (
                    Attachable == input.Attachable ||
                    Attachable != null &&
                    Attachable.Equals(input.Attachable)
                ) &&
                (
                    Ingress == input.Ingress ||
                    Ingress != null &&
                    Ingress.Equals(input.Ingress)
                ) &&
                (
                    IPAM == input.IPAM ||
                    IPAM != null &&
                    IPAM.Equals(input.IPAM)
                ) &&
                (
                    EnableIPv6 == input.EnableIPv6 ||
                    EnableIPv6 != null &&
                    EnableIPv6.Equals(input.EnableIPv6)
                ) &&
                (
                    Options == input.Options ||
                    Options != null &&
                    input.Options != null &&
                    Options.SequenceEqual(input.Options)
                ) &&
                (
                    Labels == input.Labels ||
                    Labels != null &&
                    input.Labels != null &&
                    Labels.SequenceEqual(input.Labels)
                );
        }

        /// <summary>
        ///     To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject2 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CheckDuplicate: ").Append(CheckDuplicate).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  Internal: ").Append(Internal).Append("\n");
            sb.Append("  Attachable: ").Append(Attachable).Append("\n");
            sb.Append("  Ingress: ").Append(Ingress).Append("\n");
            sb.Append("  IPAM: ").Append(IPAM).Append("\n");
            sb.Append("  EnableIPv6: ").Append(EnableIPv6).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonSerializer.Serialize(this);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InlineObject2);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (CheckDuplicate != null)
                    hashCode = hashCode * 59 + CheckDuplicate.GetHashCode();
                if (Driver != null)
                    hashCode = hashCode * 59 + Driver.GetHashCode();
                if (Internal != null)
                    hashCode = hashCode * 59 + Internal.GetHashCode();
                if (Attachable != null)
                    hashCode = hashCode * 59 + Attachable.GetHashCode();
                if (Ingress != null)
                    hashCode = hashCode * 59 + Ingress.GetHashCode();
                if (IPAM != null)
                    hashCode = hashCode * 59 + IPAM.GetHashCode();
                if (EnableIPv6 != null)
                    hashCode = hashCode * 59 + EnableIPv6.GetHashCode();
                if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                return hashCode;
            }
        }
    }
}